//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export interface IAuthClient {
    checkAuth(): Promise<AuthenticationStateDto | null>;
    login(command: LoginCommand | undefined): Promise<FileResponse | null>;
    logout(): Promise<FileResponse | null>;
    register(command: RegisterCommand | undefined): Promise<FileResponse | null>;
}

export class AuthClient implements IAuthClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    checkAuth( cancelToken?: CancelToken | undefined): Promise<AuthenticationStateDto | null> {
        let url_ = this.baseUrl + "/api/v1.0/Auth/check-auth";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCheckAuth(_response);
        });
    }

    protected processCheckAuth(response: AxiosResponse): Promise<AuthenticationStateDto | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? AuthenticationStateDto.fromJS(resultData200) : <any>null;
            return Promise.resolve<AuthenticationStateDto | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AuthenticationStateDto | null>(null as any);
    }

    login(command: LoginCommand | undefined, cancelToken?: CancelToken | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/v1.0/Auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }

    logout( cancelToken?: CancelToken | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/v1.0/Auth/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogout(_response);
        });
    }

    protected processLogout(response: AxiosResponse): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }

    register(command: RegisterCommand | undefined, cancelToken?: CancelToken | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/v1.0/Auth/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: AxiosResponse): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }
}

export interface ICompanyClient {
    searchCompanies(searchTerm: string | null | undefined): Promise<CompanyDto[]>;
    updateCompany(companyId: number, command: UpdateCompanyCommand | undefined): Promise<void>;
    deleteCompanies(command: DeleteCompaniesCommand | undefined): Promise<void>;
    createCompany(command: CreateCompanyCommand | undefined): Promise<number>;
}

export class CompanyClient implements ICompanyClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    searchCompanies(searchTerm: string | null | undefined, cancelToken?: CancelToken | undefined): Promise<CompanyDto[]> {
        let url_ = this.baseUrl + "/api/v1.0/Company/search?";
        if (searchTerm !== undefined && searchTerm !== null)
            url_ += "searchTerm=" + encodeURIComponent("" + searchTerm) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSearchCompanies(_response);
        });
    }

    protected processSearchCompanies(response: AxiosResponse): Promise<CompanyDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CompanyDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<CompanyDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CompanyDto[]>(null as any);
    }

    updateCompany(companyId: number, command: UpdateCompanyCommand | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v1.0/Company/{companyId}";
        if (companyId === undefined || companyId === null)
            throw new Error("The parameter 'companyId' must be defined.");
        url_ = url_.replace("{companyId}", encodeURIComponent("" + companyId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateCompany(_response);
        });
    }

    protected processUpdateCompany(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    deleteCompanies(command: DeleteCompaniesCommand | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v1.0/Company";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "DELETE",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteCompanies(_response);
        });
    }

    protected processDeleteCompanies(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    createCompany(command: CreateCompanyCommand | undefined, cancelToken?: CancelToken | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/v1.0/Company";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateCompany(_response);
        });
    }

    protected processCreateCompany(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<number>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(null as any);
    }
}

export interface IDepotClient {
    getDepots(): Promise<DepotsInformationDto[]>;
    deleteDepots(command: DeleteDepotsCommand | undefined): Promise<void>;
    createDepot(command: CreateDepotCommand | undefined): Promise<number>;
    updateDepot(depotId: number, command: UpdateDepotCommand | undefined): Promise<void>;
}

export class DepotClient implements IDepotClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    getDepots( cancelToken?: CancelToken | undefined): Promise<DepotsInformationDto[]> {
        let url_ = this.baseUrl + "/api/v1.0/Depot";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetDepots(_response);
        });
    }

    protected processGetDepots(response: AxiosResponse): Promise<DepotsInformationDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DepotsInformationDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<DepotsInformationDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DepotsInformationDto[]>(null as any);
    }

    deleteDepots(command: DeleteDepotsCommand | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v1.0/Depot";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "DELETE",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteDepots(_response);
        });
    }

    protected processDeleteDepots(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    createDepot(command: CreateDepotCommand | undefined, cancelToken?: CancelToken | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/v1.0/Depot";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateDepot(_response);
        });
    }

    protected processCreateDepot(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<number>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(null as any);
    }

    updateDepot(depotId: number, command: UpdateDepotCommand | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v1.0/Depot/{depotId}";
        if (depotId === undefined || depotId === null)
            throw new Error("The parameter 'depotId' must be defined.");
        url_ = url_.replace("{depotId}", encodeURIComponent("" + depotId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateDepot(_response);
        });
    }

    protected processUpdateDepot(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export interface IMaterialClient {
    getMaterials(): Promise<MaterialInformationDto[]>;
    deleteMaterial(command: DeleteMaterialsCommand | undefined): Promise<void>;
    createMaterial(command: CreateMaterialCommand | undefined): Promise<number>;
    updateMaterial(materialId: number, command: UpdateMaterialCommand | undefined): Promise<void>;
}

export class MaterialClient implements IMaterialClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    getMaterials( cancelToken?: CancelToken | undefined): Promise<MaterialInformationDto[]> {
        let url_ = this.baseUrl + "/api/v1.0/Material";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetMaterials(_response);
        });
    }

    protected processGetMaterials(response: AxiosResponse): Promise<MaterialInformationDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MaterialInformationDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<MaterialInformationDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MaterialInformationDto[]>(null as any);
    }

    deleteMaterial(command: DeleteMaterialsCommand | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v1.0/Material";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "DELETE",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteMaterial(_response);
        });
    }

    protected processDeleteMaterial(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    createMaterial(command: CreateMaterialCommand | undefined, cancelToken?: CancelToken | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/v1.0/Material";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateMaterial(_response);
        });
    }

    protected processCreateMaterial(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<number>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(null as any);
    }

    updateMaterial(materialId: number, command: UpdateMaterialCommand | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v1.0/Material/{materialId}";
        if (materialId === undefined || materialId === null)
            throw new Error("The parameter 'materialId' must be defined.");
        url_ = url_.replace("{materialId}", encodeURIComponent("" + materialId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateMaterial(_response);
        });
    }

    protected processUpdateMaterial(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export interface IMaterialPricingClient {
    getMaterialPricingInitialData(depotId: number): Promise<MaterialPricingInitialDataDto>;
    getDepotMaterialPricingsInitialData(depotId: number): Promise<DepotMaterialPricingInitialDataDto>;
    createMaterialPricing(command: CreateMaterialPricingsCommand | undefined): Promise<void>;
    updateMaterialPricing(command: UpdateMaterialPricingCommand | undefined): Promise<void>;
    deleteMaterialPricings(command: DeleteMaterialPricingCommand | undefined): Promise<void>;
}

export class MaterialPricingClient implements IMaterialPricingClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    getMaterialPricingInitialData(depotId: number, cancelToken?: CancelToken | undefined): Promise<MaterialPricingInitialDataDto> {
        let url_ = this.baseUrl + "/api/v1.0/MaterialPricing/initial-data?";
        if (depotId === undefined || depotId === null)
            throw new Error("The parameter 'depotId' must be defined and cannot be null.");
        else
            url_ += "depotId=" + encodeURIComponent("" + depotId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetMaterialPricingInitialData(_response);
        });
    }

    protected processGetMaterialPricingInitialData(response: AxiosResponse): Promise<MaterialPricingInitialDataDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MaterialPricingInitialDataDto.fromJS(resultData200);
            return Promise.resolve<MaterialPricingInitialDataDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MaterialPricingInitialDataDto>(null as any);
    }

    getDepotMaterialPricingsInitialData(depotId: number, cancelToken?: CancelToken | undefined): Promise<DepotMaterialPricingInitialDataDto> {
        let url_ = this.baseUrl + "/api/v1.0/MaterialPricing/{depotId}";
        if (depotId === undefined || depotId === null)
            throw new Error("The parameter 'depotId' must be defined.");
        url_ = url_.replace("{depotId}", encodeURIComponent("" + depotId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetDepotMaterialPricingsInitialData(_response);
        });
    }

    protected processGetDepotMaterialPricingsInitialData(response: AxiosResponse): Promise<DepotMaterialPricingInitialDataDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DepotMaterialPricingInitialDataDto.fromJS(resultData200);
            return Promise.resolve<DepotMaterialPricingInitialDataDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DepotMaterialPricingInitialDataDto>(null as any);
    }

    createMaterialPricing(command: CreateMaterialPricingsCommand | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v1.0/MaterialPricing";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateMaterialPricing(_response);
        });
    }

    protected processCreateMaterialPricing(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    updateMaterialPricing(command: UpdateMaterialPricingCommand | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v1.0/MaterialPricing";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateMaterialPricing(_response);
        });
    }

    protected processUpdateMaterialPricing(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    deleteMaterialPricings(command: DeleteMaterialPricingCommand | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v1.0/MaterialPricing";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "DELETE",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteMaterialPricings(_response);
        });
    }

    protected processDeleteMaterialPricings(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export interface IQuoteClient {
    getSavedQuotes(): Promise<GetQuoteDto[] | null>;
    getDeliveryOnlyQuoteInitialData(): Promise<QuoteDeliveryOnlyInitialDataDto | null>;
    getSupplyDeliveryQuoteInitialData(): Promise<QuoteSupplyDeliveryInitialDataDto>;
    getDeliveryOnlyUpdateQuoteInitialData(id: number): Promise<UpdateQuoteDeliveryOnlyInitialDataDto | null>;
    getSupplyDeliveryUpdateQuoteInitialData(id: number): Promise<UpdateQuoteSupplyDeliveryInitialDataDto | null>;
    updateDeliveryOnlyQuote(quoteId: number, command: UpdateDeliveryOnlyQuoteCommand | undefined): Promise<FileResponse | null>;
    updateDeliveryOnlyQuotePricing(quoteId: number, command: UpdateDeliveryOnlyQuotePricingCommand | undefined): Promise<FileResponse | null>;
    getSavedDeliveryOnlyMovementPricings(quoteId: number): Promise<DeliveryOnlyMovementPricingDto[] | null>;
    updateSupplyDeliveryQuote(quoteId: number, command: UpdateSupplyDeliveryQuoteCommand | undefined): Promise<FileResponse | null>;
    updateSupplyDeliveryQuotePricing(quoteId: number, command: UpdateSupplyDeliveryQuotePricingCommand | undefined): Promise<FileResponse | null>;
    getSavedSupplyDeliveryMovementPricings(quoteId: number): Promise<SupplyDeliveryMovementPricingDto[] | null>;
    getNewDeliveryOnlyMovementPricing(query: GetNewDeliveryOnlyMovementPricingQuery | undefined): Promise<AdjustDeliveryQuotePricingDto | null>;
    getNewSupplyDeliveryMovementPricing(query: GetNewSupplyDeliveryMovementPricingQuery | undefined): Promise<SupplyDeliveryMovementPricingDto | null>;
    createDeliveryOnlyQuote(command: CreateDeliveryOnlyQuoteCommand | undefined): Promise<number>;
    createSupplyDeliveryQuote(command: CreateSupplyDeliveryQuoteCommand | undefined): Promise<number>;
    getAddedMaterialMovementInitialData(hasTrafficEnabled: boolean | undefined, materialId: number | undefined, materialUnitId: number | undefined, deliveryLocationLatitude: number | undefined, deliveryLocationLongitude: number | undefined, journeyTime: number | null | undefined): Promise<MaterialMovementForDisplayDto[]>;
    getAddedDeliveryOnlyMovementInitialData(deliveryLocationLatitude: number | undefined, deliveryLocationLongitude: number | undefined, startLocationLongitude: number | undefined, startLocationLatitude: number | undefined): Promise<DeliveryOnlyMovementForDisplayDto>;
    downloadQuote(quoteId: number): Promise<FileResponse | null>;
    emailQuote(quoteId: number, command: EmailQuoteCommand | undefined): Promise<FileResponse | null>;
    deleteQuote(id: number): Promise<FileResponse | null>;
}

export class QuoteClient implements IQuoteClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    getSavedQuotes( cancelToken?: CancelToken | undefined): Promise<GetQuoteDto[] | null> {
        let url_ = this.baseUrl + "/api/v1.0/Quote";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetSavedQuotes(_response);
        });
    }

    protected processGetSavedQuotes(response: AxiosResponse): Promise<GetQuoteDto[] | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetQuoteDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<GetQuoteDto[] | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetQuoteDto[] | null>(null as any);
    }

    getDeliveryOnlyQuoteInitialData( cancelToken?: CancelToken | undefined): Promise<QuoteDeliveryOnlyInitialDataDto | null> {
        let url_ = this.baseUrl + "/api/v1.0/Quote/delivery-only/initial-data";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetDeliveryOnlyQuoteInitialData(_response);
        });
    }

    protected processGetDeliveryOnlyQuoteInitialData(response: AxiosResponse): Promise<QuoteDeliveryOnlyInitialDataDto | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? QuoteDeliveryOnlyInitialDataDto.fromJS(resultData200) : <any>null;
            return Promise.resolve<QuoteDeliveryOnlyInitialDataDto | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QuoteDeliveryOnlyInitialDataDto | null>(null as any);
    }

    getSupplyDeliveryQuoteInitialData( cancelToken?: CancelToken | undefined): Promise<QuoteSupplyDeliveryInitialDataDto> {
        let url_ = this.baseUrl + "/api/v1.0/Quote/supply-delivery/initial-data";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetSupplyDeliveryQuoteInitialData(_response);
        });
    }

    protected processGetSupplyDeliveryQuoteInitialData(response: AxiosResponse): Promise<QuoteSupplyDeliveryInitialDataDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QuoteSupplyDeliveryInitialDataDto.fromJS(resultData200);
            return Promise.resolve<QuoteSupplyDeliveryInitialDataDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QuoteSupplyDeliveryInitialDataDto>(null as any);
    }

    getDeliveryOnlyUpdateQuoteInitialData(id: number, cancelToken?: CancelToken | undefined): Promise<UpdateQuoteDeliveryOnlyInitialDataDto | null> {
        let url_ = this.baseUrl + "/api/v1.0/Quote/delivery-only/initial-data/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetDeliveryOnlyUpdateQuoteInitialData(_response);
        });
    }

    protected processGetDeliveryOnlyUpdateQuoteInitialData(response: AxiosResponse): Promise<UpdateQuoteDeliveryOnlyInitialDataDto | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? UpdateQuoteDeliveryOnlyInitialDataDto.fromJS(resultData200) : <any>null;
            return Promise.resolve<UpdateQuoteDeliveryOnlyInitialDataDto | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UpdateQuoteDeliveryOnlyInitialDataDto | null>(null as any);
    }

    getSupplyDeliveryUpdateQuoteInitialData(id: number, cancelToken?: CancelToken | undefined): Promise<UpdateQuoteSupplyDeliveryInitialDataDto | null> {
        let url_ = this.baseUrl + "/api/v1.0/Quote/supply-delivery/initial-data/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetSupplyDeliveryUpdateQuoteInitialData(_response);
        });
    }

    protected processGetSupplyDeliveryUpdateQuoteInitialData(response: AxiosResponse): Promise<UpdateQuoteSupplyDeliveryInitialDataDto | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? UpdateQuoteSupplyDeliveryInitialDataDto.fromJS(resultData200) : <any>null;
            return Promise.resolve<UpdateQuoteSupplyDeliveryInitialDataDto | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UpdateQuoteSupplyDeliveryInitialDataDto | null>(null as any);
    }

    updateDeliveryOnlyQuote(quoteId: number, command: UpdateDeliveryOnlyQuoteCommand | undefined, cancelToken?: CancelToken | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/v1.0/Quote/delivery-only/{quoteId}";
        if (quoteId === undefined || quoteId === null)
            throw new Error("The parameter 'quoteId' must be defined.");
        url_ = url_.replace("{quoteId}", encodeURIComponent("" + quoteId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            responseType: "blob",
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateDeliveryOnlyQuote(_response);
        });
    }

    protected processUpdateDeliveryOnlyQuote(response: AxiosResponse): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }

    updateDeliveryOnlyQuotePricing(quoteId: number, command: UpdateDeliveryOnlyQuotePricingCommand | undefined, cancelToken?: CancelToken | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/v1.0/Quote/delivery-only/pricing/{quoteId}";
        if (quoteId === undefined || quoteId === null)
            throw new Error("The parameter 'quoteId' must be defined.");
        url_ = url_.replace("{quoteId}", encodeURIComponent("" + quoteId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            responseType: "blob",
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateDeliveryOnlyQuotePricing(_response);
        });
    }

    protected processUpdateDeliveryOnlyQuotePricing(response: AxiosResponse): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }

    getSavedDeliveryOnlyMovementPricings(quoteId: number, cancelToken?: CancelToken | undefined): Promise<DeliveryOnlyMovementPricingDto[] | null> {
        let url_ = this.baseUrl + "/api/v1.0/Quote/delivery-only/pricing/{quoteId}";
        if (quoteId === undefined || quoteId === null)
            throw new Error("The parameter 'quoteId' must be defined.");
        url_ = url_.replace("{quoteId}", encodeURIComponent("" + quoteId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetSavedDeliveryOnlyMovementPricings(_response);
        });
    }

    protected processGetSavedDeliveryOnlyMovementPricings(response: AxiosResponse): Promise<DeliveryOnlyMovementPricingDto[] | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DeliveryOnlyMovementPricingDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<DeliveryOnlyMovementPricingDto[] | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeliveryOnlyMovementPricingDto[] | null>(null as any);
    }

    updateSupplyDeliveryQuote(quoteId: number, command: UpdateSupplyDeliveryQuoteCommand | undefined, cancelToken?: CancelToken | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/v1.0/Quote/supply-delivery/{quoteId}";
        if (quoteId === undefined || quoteId === null)
            throw new Error("The parameter 'quoteId' must be defined.");
        url_ = url_.replace("{quoteId}", encodeURIComponent("" + quoteId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            responseType: "blob",
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateSupplyDeliveryQuote(_response);
        });
    }

    protected processUpdateSupplyDeliveryQuote(response: AxiosResponse): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }

    updateSupplyDeliveryQuotePricing(quoteId: number, command: UpdateSupplyDeliveryQuotePricingCommand | undefined, cancelToken?: CancelToken | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/v1.0/Quote/supply-delivery/pricing/{quoteId}";
        if (quoteId === undefined || quoteId === null)
            throw new Error("The parameter 'quoteId' must be defined.");
        url_ = url_.replace("{quoteId}", encodeURIComponent("" + quoteId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            responseType: "blob",
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateSupplyDeliveryQuotePricing(_response);
        });
    }

    protected processUpdateSupplyDeliveryQuotePricing(response: AxiosResponse): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }

    getSavedSupplyDeliveryMovementPricings(quoteId: number, cancelToken?: CancelToken | undefined): Promise<SupplyDeliveryMovementPricingDto[] | null> {
        let url_ = this.baseUrl + "/api/v1.0/Quote/supply-delivery/pricing/{quoteId}";
        if (quoteId === undefined || quoteId === null)
            throw new Error("The parameter 'quoteId' must be defined.");
        url_ = url_.replace("{quoteId}", encodeURIComponent("" + quoteId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetSavedSupplyDeliveryMovementPricings(_response);
        });
    }

    protected processGetSavedSupplyDeliveryMovementPricings(response: AxiosResponse): Promise<SupplyDeliveryMovementPricingDto[] | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SupplyDeliveryMovementPricingDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<SupplyDeliveryMovementPricingDto[] | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SupplyDeliveryMovementPricingDto[] | null>(null as any);
    }

    getNewDeliveryOnlyMovementPricing(query: GetNewDeliveryOnlyMovementPricingQuery | undefined, cancelToken?: CancelToken | undefined): Promise<AdjustDeliveryQuotePricingDto | null> {
        let url_ = this.baseUrl + "/api/v1.0/Quote/delivery-only/pricing";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetNewDeliveryOnlyMovementPricing(_response);
        });
    }

    protected processGetNewDeliveryOnlyMovementPricing(response: AxiosResponse): Promise<AdjustDeliveryQuotePricingDto | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? AdjustDeliveryQuotePricingDto.fromJS(resultData200) : <any>null;
            return Promise.resolve<AdjustDeliveryQuotePricingDto | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AdjustDeliveryQuotePricingDto | null>(null as any);
    }

    getNewSupplyDeliveryMovementPricing(query: GetNewSupplyDeliveryMovementPricingQuery | undefined, cancelToken?: CancelToken | undefined): Promise<SupplyDeliveryMovementPricingDto | null> {
        let url_ = this.baseUrl + "/api/v1.0/Quote/supply-delivery/pricing";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetNewSupplyDeliveryMovementPricing(_response);
        });
    }

    protected processGetNewSupplyDeliveryMovementPricing(response: AxiosResponse): Promise<SupplyDeliveryMovementPricingDto | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? SupplyDeliveryMovementPricingDto.fromJS(resultData200) : <any>null;
            return Promise.resolve<SupplyDeliveryMovementPricingDto | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SupplyDeliveryMovementPricingDto | null>(null as any);
    }

    createDeliveryOnlyQuote(command: CreateDeliveryOnlyQuoteCommand | undefined, cancelToken?: CancelToken | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/v1.0/Quote/delivery-only";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateDeliveryOnlyQuote(_response);
        });
    }

    protected processCreateDeliveryOnlyQuote(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<number>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(null as any);
    }

    createSupplyDeliveryQuote(command: CreateSupplyDeliveryQuoteCommand | undefined, cancelToken?: CancelToken | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/v1.0/Quote/supply-delivery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateSupplyDeliveryQuote(_response);
        });
    }

    protected processCreateSupplyDeliveryQuote(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<number>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(null as any);
    }

    getAddedMaterialMovementInitialData(hasTrafficEnabled: boolean | undefined, materialId: number | undefined, materialUnitId: number | undefined, deliveryLocationLatitude: number | undefined, deliveryLocationLongitude: number | undefined, journeyTime: number | null | undefined, cancelToken?: CancelToken | undefined): Promise<MaterialMovementForDisplayDto[]> {
        let url_ = this.baseUrl + "/api/v1.0/Quote/supply-delivery/movement/initial-data?";
        if (hasTrafficEnabled === null)
            throw new Error("The parameter 'hasTrafficEnabled' cannot be null.");
        else if (hasTrafficEnabled !== undefined)
            url_ += "hasTrafficEnabled=" + encodeURIComponent("" + hasTrafficEnabled) + "&";
        if (materialId === null)
            throw new Error("The parameter 'materialId' cannot be null.");
        else if (materialId !== undefined)
            url_ += "materialId=" + encodeURIComponent("" + materialId) + "&";
        if (materialUnitId === null)
            throw new Error("The parameter 'materialUnitId' cannot be null.");
        else if (materialUnitId !== undefined)
            url_ += "materialUnitId=" + encodeURIComponent("" + materialUnitId) + "&";
        if (deliveryLocationLatitude === null)
            throw new Error("The parameter 'deliveryLocationLatitude' cannot be null.");
        else if (deliveryLocationLatitude !== undefined)
            url_ += "deliveryLocationLatitude=" + encodeURIComponent("" + deliveryLocationLatitude) + "&";
        if (deliveryLocationLongitude === null)
            throw new Error("The parameter 'deliveryLocationLongitude' cannot be null.");
        else if (deliveryLocationLongitude !== undefined)
            url_ += "deliveryLocationLongitude=" + encodeURIComponent("" + deliveryLocationLongitude) + "&";
        if (journeyTime !== undefined && journeyTime !== null)
            url_ += "journeyTime=" + encodeURIComponent("" + journeyTime) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAddedMaterialMovementInitialData(_response);
        });
    }

    protected processGetAddedMaterialMovementInitialData(response: AxiosResponse): Promise<MaterialMovementForDisplayDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MaterialMovementForDisplayDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<MaterialMovementForDisplayDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MaterialMovementForDisplayDto[]>(null as any);
    }

    getAddedDeliveryOnlyMovementInitialData(deliveryLocationLatitude: number | undefined, deliveryLocationLongitude: number | undefined, startLocationLongitude: number | undefined, startLocationLatitude: number | undefined, cancelToken?: CancelToken | undefined): Promise<DeliveryOnlyMovementForDisplayDto> {
        let url_ = this.baseUrl + "/api/v1.0/Quote/delivery-only/movement/initial-data?";
        if (deliveryLocationLatitude === null)
            throw new Error("The parameter 'deliveryLocationLatitude' cannot be null.");
        else if (deliveryLocationLatitude !== undefined)
            url_ += "deliveryLocationLatitude=" + encodeURIComponent("" + deliveryLocationLatitude) + "&";
        if (deliveryLocationLongitude === null)
            throw new Error("The parameter 'deliveryLocationLongitude' cannot be null.");
        else if (deliveryLocationLongitude !== undefined)
            url_ += "deliveryLocationLongitude=" + encodeURIComponent("" + deliveryLocationLongitude) + "&";
        if (startLocationLongitude === null)
            throw new Error("The parameter 'startLocationLongitude' cannot be null.");
        else if (startLocationLongitude !== undefined)
            url_ += "startLocationLongitude=" + encodeURIComponent("" + startLocationLongitude) + "&";
        if (startLocationLatitude === null)
            throw new Error("The parameter 'startLocationLatitude' cannot be null.");
        else if (startLocationLatitude !== undefined)
            url_ += "startLocationLatitude=" + encodeURIComponent("" + startLocationLatitude) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAddedDeliveryOnlyMovementInitialData(_response);
        });
    }

    protected processGetAddedDeliveryOnlyMovementInitialData(response: AxiosResponse): Promise<DeliveryOnlyMovementForDisplayDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeliveryOnlyMovementForDisplayDto.fromJS(resultData200);
            return Promise.resolve<DeliveryOnlyMovementForDisplayDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeliveryOnlyMovementForDisplayDto>(null as any);
    }

    downloadQuote(quoteId: number, cancelToken?: CancelToken | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/v1.0/Quote/download/{quoteId}";
        if (quoteId === undefined || quoteId === null)
            throw new Error("The parameter 'quoteId' must be defined.");
        url_ = url_.replace("{quoteId}", encodeURIComponent("" + quoteId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDownloadQuote(_response);
        });
    }

    protected processDownloadQuote(response: AxiosResponse): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }

    emailQuote(quoteId: number, command: EmailQuoteCommand | undefined, cancelToken?: CancelToken | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/v1.0/Quote/email/{quoteId}";
        if (quoteId === undefined || quoteId === null)
            throw new Error("The parameter 'quoteId' must be defined.");
        url_ = url_.replace("{quoteId}", encodeURIComponent("" + quoteId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: AxiosRequestConfig = {
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEmailQuote(_response);
        });
    }

    protected processEmailQuote(response: AxiosResponse): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }

    deleteQuote(id: number, cancelToken?: CancelToken | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/v1.0/Quote/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            responseType: "blob",
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteQuote(_response);
        });
    }

    protected processDeleteQuote(response: AxiosResponse): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }
}

export interface ISettingsClient {
    getInitialData(): Promise<SettingsInitialDataDto | null>;
}

export class SettingsClient implements ISettingsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    getInitialData( cancelToken?: CancelToken | undefined): Promise<SettingsInitialDataDto | null> {
        let url_ = this.baseUrl + "/api/v1.0/Settings";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetInitialData(_response);
        });
    }

    protected processGetInitialData(response: AxiosResponse): Promise<SettingsInitialDataDto | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? SettingsInitialDataDto.fromJS(resultData200) : <any>null;
            return Promise.resolve<SettingsInitialDataDto | null>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SettingsInitialDataDto | null>(null as any);
    }
}

export interface ITestClient {
    brokenQuote(): Promise<FileResponse | null>;
    emailTest(): Promise<FileResponse | null>;
}

export class TestClient implements ITestClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    brokenQuote( cancelToken?: CancelToken | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/v/Test/test";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            responseType: "blob",
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processBrokenQuote(_response);
        });
    }

    protected processBrokenQuote(response: AxiosResponse): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }

    emailTest( cancelToken?: CancelToken | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/v/Test/test-email-attach";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            responseType: "blob",
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEmailTest(_response);
        });
    }

    protected processEmailTest(response: AxiosResponse): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }
}

export class AuthenticationStateDto implements IAuthenticationStateDto {
    username!: string;
    roles!: UserRoles[];
    isAuthenticated!: boolean;

    constructor(data?: IAuthenticationStateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.roles = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
            else {
                this.roles = <any>null;
            }
            this.isAuthenticated = _data["isAuthenticated"] !== undefined ? _data["isAuthenticated"] : <any>null;
        }
    }

    static fromJS(data: any): AuthenticationStateDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticationStateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username !== undefined ? this.username : <any>null;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        data["isAuthenticated"] = this.isAuthenticated !== undefined ? this.isAuthenticated : <any>null;
        return data;
    }
}

export interface IAuthenticationStateDto {
    username: string;
    roles: UserRoles[];
    isAuthenticated: boolean;
}

export enum UserRoles {
    Admin = 0,
}

export class LoginCommand implements ILoginCommand {
    username!: string;
    password!: string;

    constructor(data?: ILoginCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
        }
    }

    static fromJS(data: any): LoginCommand {
        data = typeof data === 'object' ? data : {};
        let result = new LoginCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        return data;
    }
}

export interface ILoginCommand {
    username: string;
    password: string;
}

export class RegisterCommand implements IRegisterCommand {
    username!: string;
    email!: string;
    password!: string;
    firstName!: string;
    lastName!: string;

    constructor(data?: IRegisterCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
        }
    }

    static fromJS(data: any): RegisterCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        return data;
    }
}

export interface IRegisterCommand {
    username: string;
    email: string;
    password: string;
    firstName: string;
    lastName: string;
}

export class CompanyDto implements ICompanyDto {
    id!: number;
    name!: string;
    email?: string | null;
    phone?: string | null;

    constructor(data?: ICompanyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.phone = _data["phone"] !== undefined ? _data["phone"] : <any>null;
        }
    }

    static fromJS(data: any): CompanyDto {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["phone"] = this.phone !== undefined ? this.phone : <any>null;
        return data;
    }
}

export interface ICompanyDto {
    id: number;
    name: string;
    email?: string | null;
    phone?: string | null;
}

export class UpdateCompanyCommand implements IUpdateCompanyCommand {
    companyId!: number;
    email!: string;
    phone!: string;
    name!: string;

    constructor(data?: IUpdateCompanyCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.companyId = _data["companyId"] !== undefined ? _data["companyId"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.phone = _data["phone"] !== undefined ? _data["phone"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateCompanyCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCompanyCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyId"] = this.companyId !== undefined ? this.companyId : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["phone"] = this.phone !== undefined ? this.phone : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data;
    }
}

export interface IUpdateCompanyCommand {
    companyId: number;
    email: string;
    phone: string;
    name: string;
}

export class DeleteCompaniesCommand implements IDeleteCompaniesCommand {
    companyIds!: number[];

    constructor(data?: IDeleteCompaniesCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.companyIds = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["companyIds"])) {
                this.companyIds = [] as any;
                for (let item of _data["companyIds"])
                    this.companyIds!.push(item);
            }
            else {
                this.companyIds = <any>null;
            }
        }
    }

    static fromJS(data: any): DeleteCompaniesCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteCompaniesCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.companyIds)) {
            data["companyIds"] = [];
            for (let item of this.companyIds)
                data["companyIds"].push(item);
        }
        return data;
    }
}

export interface IDeleteCompaniesCommand {
    companyIds: number[];
}

export class CreateCompanyCommand implements ICreateCompanyCommand {
    email!: string;
    phone!: string;
    name!: string;

    constructor(data?: ICreateCompanyCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.phone = _data["phone"] !== undefined ? _data["phone"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): CreateCompanyCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCompanyCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["phone"] = this.phone !== undefined ? this.phone : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data;
    }
}

export interface ICreateCompanyCommand {
    email: string;
    phone: string;
    name: string;
}

export class DepotsInformationDto implements IDepotsInformationDto {
    depotId!: number;
    depotName!: string;
    depotAddress!: AddressDto;
    numberOfSuppliedMaterials!: number;

    constructor(data?: IDepotsInformationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.depotAddress = new AddressDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.depotId = _data["depotId"] !== undefined ? _data["depotId"] : <any>null;
            this.depotName = _data["depotName"] !== undefined ? _data["depotName"] : <any>null;
            this.depotAddress = _data["depotAddress"] ? AddressDto.fromJS(_data["depotAddress"]) : new AddressDto();
            this.numberOfSuppliedMaterials = _data["numberOfSuppliedMaterials"] !== undefined ? _data["numberOfSuppliedMaterials"] : <any>null;
        }
    }

    static fromJS(data: any): DepotsInformationDto {
        data = typeof data === 'object' ? data : {};
        let result = new DepotsInformationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["depotId"] = this.depotId !== undefined ? this.depotId : <any>null;
        data["depotName"] = this.depotName !== undefined ? this.depotName : <any>null;
        data["depotAddress"] = this.depotAddress ? this.depotAddress.toJSON() : <any>null;
        data["numberOfSuppliedMaterials"] = this.numberOfSuppliedMaterials !== undefined ? this.numberOfSuppliedMaterials : <any>null;
        return data;
    }
}

export interface IDepotsInformationDto {
    depotId: number;
    depotName: string;
    depotAddress: AddressDto;
    numberOfSuppliedMaterials: number;
}

export class AddressDto implements IAddressDto {
    addressPoint!: RoutePoint;
    fullAddress!: string;

    constructor(data?: IAddressDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.addressPoint = new RoutePoint();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.addressPoint = _data["addressPoint"] ? RoutePoint.fromJS(_data["addressPoint"]) : new RoutePoint();
            this.fullAddress = _data["fullAddress"] !== undefined ? _data["fullAddress"] : <any>null;
        }
    }

    static fromJS(data: any): AddressDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddressDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["addressPoint"] = this.addressPoint ? this.addressPoint.toJSON() : <any>null;
        data["fullAddress"] = this.fullAddress !== undefined ? this.fullAddress : <any>null;
        return data;
    }
}

export interface IAddressDto {
    addressPoint: RoutePoint;
    fullAddress: string;
}

export class RoutePoint implements IRoutePoint {
    longitude!: number;
    latitude!: number;

    constructor(data?: IRoutePoint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.longitude = _data["longitude"] !== undefined ? _data["longitude"] : <any>null;
            this.latitude = _data["latitude"] !== undefined ? _data["latitude"] : <any>null;
        }
    }

    static fromJS(data: any): RoutePoint {
        data = typeof data === 'object' ? data : {};
        let result = new RoutePoint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["longitude"] = this.longitude !== undefined ? this.longitude : <any>null;
        data["latitude"] = this.latitude !== undefined ? this.latitude : <any>null;
        return data;
    }
}

export interface IRoutePoint {
    longitude: number;
    latitude: number;
}

export class UpdateDepotCommand implements IUpdateDepotCommand {
    depotId!: number;
    depotName!: string;
    address!: AddressDto;
    isActive!: boolean;

    constructor(data?: IUpdateDepotCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.address = new AddressDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.depotId = _data["depotId"] !== undefined ? _data["depotId"] : <any>null;
            this.depotName = _data["depotName"] !== undefined ? _data["depotName"] : <any>null;
            this.address = _data["address"] ? AddressDto.fromJS(_data["address"]) : new AddressDto();
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateDepotCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDepotCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["depotId"] = this.depotId !== undefined ? this.depotId : <any>null;
        data["depotName"] = this.depotName !== undefined ? this.depotName : <any>null;
        data["address"] = this.address ? this.address.toJSON() : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        return data;
    }
}

export interface IUpdateDepotCommand {
    depotId: number;
    depotName: string;
    address: AddressDto;
    isActive: boolean;
}

export class DeleteDepotsCommand implements IDeleteDepotsCommand {
    depotIds!: number[];

    constructor(data?: IDeleteDepotsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.depotIds = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["depotIds"])) {
                this.depotIds = [] as any;
                for (let item of _data["depotIds"])
                    this.depotIds!.push(item);
            }
            else {
                this.depotIds = <any>null;
            }
        }
    }

    static fromJS(data: any): DeleteDepotsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteDepotsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.depotIds)) {
            data["depotIds"] = [];
            for (let item of this.depotIds)
                data["depotIds"].push(item);
        }
        return data;
    }
}

export interface IDeleteDepotsCommand {
    depotIds: number[];
}

export class CreateDepotCommand implements ICreateDepotCommand {
    depotName!: string;
    address!: AddressDto;
    isActive!: boolean;

    constructor(data?: ICreateDepotCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.address = new AddressDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.depotName = _data["depotName"] !== undefined ? _data["depotName"] : <any>null;
            this.address = _data["address"] ? AddressDto.fromJS(_data["address"]) : new AddressDto();
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
        }
    }

    static fromJS(data: any): CreateDepotCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDepotCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["depotName"] = this.depotName !== undefined ? this.depotName : <any>null;
        data["address"] = this.address ? this.address.toJSON() : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        return data;
    }
}

export interface ICreateDepotCommand {
    depotName: string;
    address: AddressDto;
    isActive: boolean;
}

export class MaterialInformationDto implements IMaterialInformationDto {
    materialId!: number;
    materialName!: string;
    highestPrice?: number | null;
    singlePrice?: number | null;
    lowestPrice?: number | null;

    constructor(data?: IMaterialInformationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.materialId = _data["materialId"] !== undefined ? _data["materialId"] : <any>null;
            this.materialName = _data["materialName"] !== undefined ? _data["materialName"] : <any>null;
            this.highestPrice = _data["highestPrice"] !== undefined ? _data["highestPrice"] : <any>null;
            this.singlePrice = _data["singlePrice"] !== undefined ? _data["singlePrice"] : <any>null;
            this.lowestPrice = _data["lowestPrice"] !== undefined ? _data["lowestPrice"] : <any>null;
        }
    }

    static fromJS(data: any): MaterialInformationDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaterialInformationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["materialId"] = this.materialId !== undefined ? this.materialId : <any>null;
        data["materialName"] = this.materialName !== undefined ? this.materialName : <any>null;
        data["highestPrice"] = this.highestPrice !== undefined ? this.highestPrice : <any>null;
        data["singlePrice"] = this.singlePrice !== undefined ? this.singlePrice : <any>null;
        data["lowestPrice"] = this.lowestPrice !== undefined ? this.lowestPrice : <any>null;
        return data;
    }
}

export interface IMaterialInformationDto {
    materialId: number;
    materialName: string;
    highestPrice?: number | null;
    singlePrice?: number | null;
    lowestPrice?: number | null;
}

export class UpdateMaterialCommand implements IUpdateMaterialCommand {
    materialId!: number;
    materialName!: string;

    constructor(data?: IUpdateMaterialCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.materialId = _data["materialId"] !== undefined ? _data["materialId"] : <any>null;
            this.materialName = _data["materialName"] !== undefined ? _data["materialName"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateMaterialCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateMaterialCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["materialId"] = this.materialId !== undefined ? this.materialId : <any>null;
        data["materialName"] = this.materialName !== undefined ? this.materialName : <any>null;
        return data;
    }
}

export interface IUpdateMaterialCommand {
    materialId: number;
    materialName: string;
}

export class DeleteMaterialsCommand implements IDeleteMaterialsCommand {
    materialIds!: number[];

    constructor(data?: IDeleteMaterialsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.materialIds = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["materialIds"])) {
                this.materialIds = [] as any;
                for (let item of _data["materialIds"])
                    this.materialIds!.push(item);
            }
            else {
                this.materialIds = <any>null;
            }
        }
    }

    static fromJS(data: any): DeleteMaterialsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteMaterialsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.materialIds)) {
            data["materialIds"] = [];
            for (let item of this.materialIds)
                data["materialIds"].push(item);
        }
        return data;
    }
}

export interface IDeleteMaterialsCommand {
    materialIds: number[];
}

export class CreateMaterialCommand implements ICreateMaterialCommand {
    materialName!: string;

    constructor(data?: ICreateMaterialCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.materialName = _data["materialName"] !== undefined ? _data["materialName"] : <any>null;
        }
    }

    static fromJS(data: any): CreateMaterialCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMaterialCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["materialName"] = this.materialName !== undefined ? this.materialName : <any>null;
        return data;
    }
}

export interface ICreateMaterialCommand {
    materialName: string;
}

export class MaterialPricingInitialDataDto implements IMaterialPricingInitialDataDto {
    depotName!: string;
    materials!: MaterialDto[];

    constructor(data?: IMaterialPricingInitialDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.materials = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.depotName = _data["depotName"] !== undefined ? _data["depotName"] : <any>null;
            if (Array.isArray(_data["materials"])) {
                this.materials = [] as any;
                for (let item of _data["materials"])
                    this.materials!.push(MaterialDto.fromJS(item));
            }
            else {
                this.materials = <any>null;
            }
        }
    }

    static fromJS(data: any): MaterialPricingInitialDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaterialPricingInitialDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["depotName"] = this.depotName !== undefined ? this.depotName : <any>null;
        if (Array.isArray(this.materials)) {
            data["materials"] = [];
            for (let item of this.materials)
                data["materials"].push(item.toJSON());
        }
        return data;
    }
}

export interface IMaterialPricingInitialDataDto {
    depotName: string;
    materials: MaterialDto[];
}

export class MaterialDto implements IMaterialDto {
    id!: number;
    materialName!: string;

    constructor(data?: IMaterialDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.materialName = _data["materialName"] !== undefined ? _data["materialName"] : <any>null;
        }
    }

    static fromJS(data: any): MaterialDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaterialDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["materialName"] = this.materialName !== undefined ? this.materialName : <any>null;
        return data;
    }
}

export interface IMaterialDto {
    id: number;
    materialName: string;
}

export class DepotMaterialPricingInitialDataDto implements IDepotMaterialPricingInitialDataDto {
    depotMaterials!: DepotMaterialPricingsDto[];
    allMaterialUnits!: MaterialUnitDto[];

    constructor(data?: IDepotMaterialPricingInitialDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.depotMaterials = [];
            this.allMaterialUnits = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["depotMaterials"])) {
                this.depotMaterials = [] as any;
                for (let item of _data["depotMaterials"])
                    this.depotMaterials!.push(DepotMaterialPricingsDto.fromJS(item));
            }
            else {
                this.depotMaterials = <any>null;
            }
            if (Array.isArray(_data["allMaterialUnits"])) {
                this.allMaterialUnits = [] as any;
                for (let item of _data["allMaterialUnits"])
                    this.allMaterialUnits!.push(MaterialUnitDto.fromJS(item));
            }
            else {
                this.allMaterialUnits = <any>null;
            }
        }
    }

    static fromJS(data: any): DepotMaterialPricingInitialDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new DepotMaterialPricingInitialDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.depotMaterials)) {
            data["depotMaterials"] = [];
            for (let item of this.depotMaterials)
                data["depotMaterials"].push(item.toJSON());
        }
        if (Array.isArray(this.allMaterialUnits)) {
            data["allMaterialUnits"] = [];
            for (let item of this.allMaterialUnits)
                data["allMaterialUnits"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDepotMaterialPricingInitialDataDto {
    depotMaterials: DepotMaterialPricingsDto[];
    allMaterialUnits: MaterialUnitDto[];
}

export class DepotMaterialPricingsDto implements IDepotMaterialPricingsDto {
    materialId!: number;
    materialName!: string;
    pricings!: DepotMaterialPricingDto[];

    constructor(data?: IDepotMaterialPricingsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.pricings = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.materialId = _data["materialId"] !== undefined ? _data["materialId"] : <any>null;
            this.materialName = _data["materialName"] !== undefined ? _data["materialName"] : <any>null;
            if (Array.isArray(_data["pricings"])) {
                this.pricings = [] as any;
                for (let item of _data["pricings"])
                    this.pricings!.push(DepotMaterialPricingDto.fromJS(item));
            }
            else {
                this.pricings = <any>null;
            }
        }
    }

    static fromJS(data: any): DepotMaterialPricingsDto {
        data = typeof data === 'object' ? data : {};
        let result = new DepotMaterialPricingsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["materialId"] = this.materialId !== undefined ? this.materialId : <any>null;
        data["materialName"] = this.materialName !== undefined ? this.materialName : <any>null;
        if (Array.isArray(this.pricings)) {
            data["pricings"] = [];
            for (let item of this.pricings)
                data["pricings"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDepotMaterialPricingsDto {
    materialId: number;
    materialName: string;
    pricings: DepotMaterialPricingDto[];
}

export class DepotMaterialPricingDto implements IDepotMaterialPricingDto {
    depotMaterialPriceId!: number;
    unitId!: number;
    unitName!: string;
    price!: number;

    constructor(data?: IDepotMaterialPricingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.depotMaterialPriceId = _data["depotMaterialPriceId"] !== undefined ? _data["depotMaterialPriceId"] : <any>null;
            this.unitId = _data["unitId"] !== undefined ? _data["unitId"] : <any>null;
            this.unitName = _data["unitName"] !== undefined ? _data["unitName"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
        }
    }

    static fromJS(data: any): DepotMaterialPricingDto {
        data = typeof data === 'object' ? data : {};
        let result = new DepotMaterialPricingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["depotMaterialPriceId"] = this.depotMaterialPriceId !== undefined ? this.depotMaterialPriceId : <any>null;
        data["unitId"] = this.unitId !== undefined ? this.unitId : <any>null;
        data["unitName"] = this.unitName !== undefined ? this.unitName : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        return data;
    }
}

export interface IDepotMaterialPricingDto {
    depotMaterialPriceId: number;
    unitId: number;
    unitName: string;
    price: number;
}

export class MaterialUnitDto implements IMaterialUnitDto {
    id!: number;
    unitName!: string;

    constructor(data?: IMaterialUnitDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.unitName = _data["unitName"] !== undefined ? _data["unitName"] : <any>null;
        }
    }

    static fromJS(data: any): MaterialUnitDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaterialUnitDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["unitName"] = this.unitName !== undefined ? this.unitName : <any>null;
        return data;
    }
}

export interface IMaterialUnitDto {
    id: number;
    unitName: string;
}

export class CreateMaterialPricingsCommand implements ICreateMaterialPricingsCommand {
    materialId!: number;
    depotId!: number;
    isActive!: boolean;
    prices!: CreateMaterialPricingPriceCommand[];

    constructor(data?: ICreateMaterialPricingsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.prices = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.materialId = _data["materialId"] !== undefined ? _data["materialId"] : <any>null;
            this.depotId = _data["depotId"] !== undefined ? _data["depotId"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            if (Array.isArray(_data["prices"])) {
                this.prices = [] as any;
                for (let item of _data["prices"])
                    this.prices!.push(CreateMaterialPricingPriceCommand.fromJS(item));
            }
            else {
                this.prices = <any>null;
            }
        }
    }

    static fromJS(data: any): CreateMaterialPricingsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMaterialPricingsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["materialId"] = this.materialId !== undefined ? this.materialId : <any>null;
        data["depotId"] = this.depotId !== undefined ? this.depotId : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.prices)) {
            data["prices"] = [];
            for (let item of this.prices)
                data["prices"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICreateMaterialPricingsCommand {
    materialId: number;
    depotId: number;
    isActive: boolean;
    prices: CreateMaterialPricingPriceCommand[];
}

export class CreateMaterialPricingPriceCommand implements ICreateMaterialPricingPriceCommand {
    unitId!: number;
    price?: number | null;

    constructor(data?: ICreateMaterialPricingPriceCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.unitId = _data["unitId"] !== undefined ? _data["unitId"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
        }
    }

    static fromJS(data: any): CreateMaterialPricingPriceCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMaterialPricingPriceCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitId"] = this.unitId !== undefined ? this.unitId : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        return data;
    }
}

export interface ICreateMaterialPricingPriceCommand {
    unitId: number;
    price?: number | null;
}

export class UpdateMaterialPricingCommand implements IUpdateMaterialPricingCommand {
    pricings!: UpdateMaterialPricingItemCommand[];
    materialId!: number;
    depotId!: number;

    constructor(data?: IUpdateMaterialPricingCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.pricings = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["pricings"])) {
                this.pricings = [] as any;
                for (let item of _data["pricings"])
                    this.pricings!.push(UpdateMaterialPricingItemCommand.fromJS(item));
            }
            else {
                this.pricings = <any>null;
            }
            this.materialId = _data["materialId"] !== undefined ? _data["materialId"] : <any>null;
            this.depotId = _data["depotId"] !== undefined ? _data["depotId"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateMaterialPricingCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateMaterialPricingCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.pricings)) {
            data["pricings"] = [];
            for (let item of this.pricings)
                data["pricings"].push(item.toJSON());
        }
        data["materialId"] = this.materialId !== undefined ? this.materialId : <any>null;
        data["depotId"] = this.depotId !== undefined ? this.depotId : <any>null;
        return data;
    }
}

export interface IUpdateMaterialPricingCommand {
    pricings: UpdateMaterialPricingItemCommand[];
    materialId: number;
    depotId: number;
}

export class UpdateMaterialPricingItemCommand implements IUpdateMaterialPricingItemCommand {
    depotMaterialPriceId?: number | null;
    unitId!: number;
    price?: number | null;

    constructor(data?: IUpdateMaterialPricingItemCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.depotMaterialPriceId = _data["depotMaterialPriceId"] !== undefined ? _data["depotMaterialPriceId"] : <any>null;
            this.unitId = _data["unitId"] !== undefined ? _data["unitId"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateMaterialPricingItemCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateMaterialPricingItemCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["depotMaterialPriceId"] = this.depotMaterialPriceId !== undefined ? this.depotMaterialPriceId : <any>null;
        data["unitId"] = this.unitId !== undefined ? this.unitId : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        return data;
    }
}

export interface IUpdateMaterialPricingItemCommand {
    depotMaterialPriceId?: number | null;
    unitId: number;
    price?: number | null;
}

export class DeleteMaterialPricingCommand implements IDeleteMaterialPricingCommand {
    depotMaterialPriceIds!: number[];

    constructor(data?: IDeleteMaterialPricingCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.depotMaterialPriceIds = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["depotMaterialPriceIds"])) {
                this.depotMaterialPriceIds = [] as any;
                for (let item of _data["depotMaterialPriceIds"])
                    this.depotMaterialPriceIds!.push(item);
            }
            else {
                this.depotMaterialPriceIds = <any>null;
            }
        }
    }

    static fromJS(data: any): DeleteMaterialPricingCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteMaterialPricingCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.depotMaterialPriceIds)) {
            data["depotMaterialPriceIds"] = [];
            for (let item of this.depotMaterialPriceIds)
                data["depotMaterialPriceIds"].push(item);
        }
        return data;
    }
}

export interface IDeleteMaterialPricingCommand {
    depotMaterialPriceIds: number[];
}

export class GetQuoteDto implements IGetQuoteDto {
    quoteId!: number;
    quoteNumber!: number;
    quoteType!: RecordTypes;
    creationInfo!: GetQuoteCreationInfoDto;
    deliveryInfo!: GetQuoteDeliveryInfoDto;
    movements!: GetQuoteMovementDto[];
    comments!: string;
    totalQuotePrice!: number;
    activeState!: string;

    constructor(data?: IGetQuoteDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.creationInfo = new GetQuoteCreationInfoDto();
            this.deliveryInfo = new GetQuoteDeliveryInfoDto();
            this.movements = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.quoteId = _data["quoteId"] !== undefined ? _data["quoteId"] : <any>null;
            this.quoteNumber = _data["quoteNumber"] !== undefined ? _data["quoteNumber"] : <any>null;
            this.quoteType = _data["quoteType"] !== undefined ? _data["quoteType"] : <any>null;
            this.creationInfo = _data["creationInfo"] ? GetQuoteCreationInfoDto.fromJS(_data["creationInfo"]) : new GetQuoteCreationInfoDto();
            this.deliveryInfo = _data["deliveryInfo"] ? GetQuoteDeliveryInfoDto.fromJS(_data["deliveryInfo"]) : new GetQuoteDeliveryInfoDto();
            if (Array.isArray(_data["movements"])) {
                this.movements = [] as any;
                for (let item of _data["movements"])
                    this.movements!.push(GetQuoteMovementDto.fromJS(item));
            }
            else {
                this.movements = <any>null;
            }
            this.comments = _data["comments"] !== undefined ? _data["comments"] : <any>null;
            this.totalQuotePrice = _data["totalQuotePrice"] !== undefined ? _data["totalQuotePrice"] : <any>null;
            this.activeState = _data["activeState"] !== undefined ? _data["activeState"] : <any>null;
        }
    }

    static fromJS(data: any): GetQuoteDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetQuoteDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quoteId"] = this.quoteId !== undefined ? this.quoteId : <any>null;
        data["quoteNumber"] = this.quoteNumber !== undefined ? this.quoteNumber : <any>null;
        data["quoteType"] = this.quoteType !== undefined ? this.quoteType : <any>null;
        data["creationInfo"] = this.creationInfo ? this.creationInfo.toJSON() : <any>null;
        data["deliveryInfo"] = this.deliveryInfo ? this.deliveryInfo.toJSON() : <any>null;
        if (Array.isArray(this.movements)) {
            data["movements"] = [];
            for (let item of this.movements)
                data["movements"].push(item.toJSON());
        }
        data["comments"] = this.comments !== undefined ? this.comments : <any>null;
        data["totalQuotePrice"] = this.totalQuotePrice !== undefined ? this.totalQuotePrice : <any>null;
        data["activeState"] = this.activeState !== undefined ? this.activeState : <any>null;
        return data;
    }
}

export interface IGetQuoteDto {
    quoteId: number;
    quoteNumber: number;
    quoteType: RecordTypes;
    creationInfo: GetQuoteCreationInfoDto;
    deliveryInfo: GetQuoteDeliveryInfoDto;
    movements: GetQuoteMovementDto[];
    comments: string;
    totalQuotePrice: number;
    activeState: string;
}

export enum RecordTypes {
    DeliveryOnly = 1,
    SupplyAndDelivery = 2,
}

export class GetQuoteCreationInfoDto implements IGetQuoteCreationInfoDto {
    customerName!: string;
    company!: CompanyDto;
    createdByName!: string;
    createdDateTime!: Date;

    constructor(data?: IGetQuoteCreationInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.company = new CompanyDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.company = _data["company"] ? CompanyDto.fromJS(_data["company"]) : new CompanyDto();
            this.createdByName = _data["createdByName"] !== undefined ? _data["createdByName"] : <any>null;
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): GetQuoteCreationInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetQuoteCreationInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["company"] = this.company ? this.company.toJSON() : <any>null;
        data["createdByName"] = this.createdByName !== undefined ? this.createdByName : <any>null;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>null;
        return data;
    }
}

export interface IGetQuoteCreationInfoDto {
    customerName: string;
    company: CompanyDto;
    createdByName: string;
    createdDateTime: Date;
}

export class GetQuoteDeliveryInfoDto implements IGetQuoteDeliveryInfoDto {
    deliveryDate?: Date | null;
    deliveryLocation!: string;

    constructor(data?: IGetQuoteDeliveryInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deliveryDate = _data["deliveryDate"] ? new Date(_data["deliveryDate"].toString()) : <any>null;
            this.deliveryLocation = _data["deliveryLocation"] !== undefined ? _data["deliveryLocation"] : <any>null;
        }
    }

    static fromJS(data: any): GetQuoteDeliveryInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetQuoteDeliveryInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliveryDate"] = this.deliveryDate ? this.deliveryDate.toISOString() : <any>null;
        data["deliveryLocation"] = this.deliveryLocation !== undefined ? this.deliveryLocation : <any>null;
        return data;
    }
}

export interface IGetQuoteDeliveryInfoDto {
    deliveryDate?: Date | null;
    deliveryLocation: string;
}

export class GetQuoteMovementDto implements IGetQuoteMovementDto {
    materialMovement!: GetQuoteMaterialMovementDto;
    deliveryMovement!: GetQuoteDeliveryMovementDto;

    constructor(data?: IGetQuoteMovementDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.materialMovement = new GetQuoteMaterialMovementDto();
            this.deliveryMovement = new GetQuoteDeliveryMovementDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.materialMovement = _data["materialMovement"] ? GetQuoteMaterialMovementDto.fromJS(_data["materialMovement"]) : new GetQuoteMaterialMovementDto();
            this.deliveryMovement = _data["deliveryMovement"] ? GetQuoteDeliveryMovementDto.fromJS(_data["deliveryMovement"]) : new GetQuoteDeliveryMovementDto();
        }
    }

    static fromJS(data: any): GetQuoteMovementDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetQuoteMovementDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["materialMovement"] = this.materialMovement ? this.materialMovement.toJSON() : <any>null;
        data["deliveryMovement"] = this.deliveryMovement ? this.deliveryMovement.toJSON() : <any>null;
        return data;
    }
}

export interface IGetQuoteMovementDto {
    materialMovement: GetQuoteMaterialMovementDto;
    deliveryMovement: GetQuoteDeliveryMovementDto;
}

export class GetQuoteMaterialMovementDto implements IGetQuoteMaterialMovementDto {
    materialMovementId!: number;
    material!: MaterialDto;
    quantity!: number;
    materialUnit!: MaterialUnitDto;
    totalPrice!: number;
    pricePerQuantityUnit!: number;
    depotName!: string;

    constructor(data?: IGetQuoteMaterialMovementDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.material = new MaterialDto();
            this.materialUnit = new MaterialUnitDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.materialMovementId = _data["materialMovementId"] !== undefined ? _data["materialMovementId"] : <any>null;
            this.material = _data["material"] ? MaterialDto.fromJS(_data["material"]) : new MaterialDto();
            this.quantity = _data["quantity"] !== undefined ? _data["quantity"] : <any>null;
            this.materialUnit = _data["materialUnit"] ? MaterialUnitDto.fromJS(_data["materialUnit"]) : new MaterialUnitDto();
            this.totalPrice = _data["totalPrice"] !== undefined ? _data["totalPrice"] : <any>null;
            this.pricePerQuantityUnit = _data["pricePerQuantityUnit"] !== undefined ? _data["pricePerQuantityUnit"] : <any>null;
            this.depotName = _data["depotName"] !== undefined ? _data["depotName"] : <any>null;
        }
    }

    static fromJS(data: any): GetQuoteMaterialMovementDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetQuoteMaterialMovementDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["materialMovementId"] = this.materialMovementId !== undefined ? this.materialMovementId : <any>null;
        data["material"] = this.material ? this.material.toJSON() : <any>null;
        data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["materialUnit"] = this.materialUnit ? this.materialUnit.toJSON() : <any>null;
        data["totalPrice"] = this.totalPrice !== undefined ? this.totalPrice : <any>null;
        data["pricePerQuantityUnit"] = this.pricePerQuantityUnit !== undefined ? this.pricePerQuantityUnit : <any>null;
        data["depotName"] = this.depotName !== undefined ? this.depotName : <any>null;
        return data;
    }
}

export interface IGetQuoteMaterialMovementDto {
    materialMovementId: number;
    material: MaterialDto;
    quantity: number;
    materialUnit: MaterialUnitDto;
    totalPrice: number;
    pricePerQuantityUnit: number;
    depotName: string;
}

export class GetQuoteDeliveryMovementDto implements IGetQuoteDeliveryMovementDto {
    deliveryMovementId!: number;
    vehicleType!: VehicleTypeDto;
    numberOfLoads!: number;
    onewayJourneyTime!: number;
    startLocation!: AddressDto;

    constructor(data?: IGetQuoteDeliveryMovementDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.vehicleType = new VehicleTypeDto();
            this.startLocation = new AddressDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deliveryMovementId = _data["deliveryMovementId"] !== undefined ? _data["deliveryMovementId"] : <any>null;
            this.vehicleType = _data["vehicleType"] ? VehicleTypeDto.fromJS(_data["vehicleType"]) : new VehicleTypeDto();
            this.numberOfLoads = _data["numberOfLoads"] !== undefined ? _data["numberOfLoads"] : <any>null;
            this.onewayJourneyTime = _data["onewayJourneyTime"] !== undefined ? _data["onewayJourneyTime"] : <any>null;
            this.startLocation = _data["startLocation"] ? AddressDto.fromJS(_data["startLocation"]) : new AddressDto();
        }
    }

    static fromJS(data: any): GetQuoteDeliveryMovementDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetQuoteDeliveryMovementDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliveryMovementId"] = this.deliveryMovementId !== undefined ? this.deliveryMovementId : <any>null;
        data["vehicleType"] = this.vehicleType ? this.vehicleType.toJSON() : <any>null;
        data["numberOfLoads"] = this.numberOfLoads !== undefined ? this.numberOfLoads : <any>null;
        data["onewayJourneyTime"] = this.onewayJourneyTime !== undefined ? this.onewayJourneyTime : <any>null;
        data["startLocation"] = this.startLocation ? this.startLocation.toJSON() : <any>null;
        return data;
    }
}

export interface IGetQuoteDeliveryMovementDto {
    deliveryMovementId: number;
    vehicleType: VehicleTypeDto;
    numberOfLoads: number;
    onewayJourneyTime: number;
    startLocation: AddressDto;
}

export class VehicleTypeDto implements IVehicleTypeDto {
    id!: number;
    name!: string;
    vehicleCapacity!: number;

    constructor(data?: IVehicleTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.vehicleCapacity = _data["vehicleCapacity"] !== undefined ? _data["vehicleCapacity"] : <any>null;
        }
    }

    static fromJS(data: any): VehicleTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["vehicleCapacity"] = this.vehicleCapacity !== undefined ? this.vehicleCapacity : <any>null;
        return data;
    }
}

export interface IVehicleTypeDto {
    id: number;
    name: string;
    vehicleCapacity: number;
}

export class QuoteDeliveryOnlyInitialDataDto implements IQuoteDeliveryOnlyInitialDataDto {
    vehicleTypes!: VehicleTypeDto[];
    defaultHasTrafficEnabled!: boolean;

    constructor(data?: IQuoteDeliveryOnlyInitialDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.vehicleTypes = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["vehicleTypes"])) {
                this.vehicleTypes = [] as any;
                for (let item of _data["vehicleTypes"])
                    this.vehicleTypes!.push(VehicleTypeDto.fromJS(item));
            }
            else {
                this.vehicleTypes = <any>null;
            }
            this.defaultHasTrafficEnabled = _data["defaultHasTrafficEnabled"] !== undefined ? _data["defaultHasTrafficEnabled"] : <any>null;
        }
    }

    static fromJS(data: any): QuoteDeliveryOnlyInitialDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new QuoteDeliveryOnlyInitialDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.vehicleTypes)) {
            data["vehicleTypes"] = [];
            for (let item of this.vehicleTypes)
                data["vehicleTypes"].push(item.toJSON());
        }
        data["defaultHasTrafficEnabled"] = this.defaultHasTrafficEnabled !== undefined ? this.defaultHasTrafficEnabled : <any>null;
        return data;
    }
}

export interface IQuoteDeliveryOnlyInitialDataDto {
    vehicleTypes: VehicleTypeDto[];
    defaultHasTrafficEnabled: boolean;
}

export class QuoteSupplyDeliveryInitialDataDto implements IQuoteSupplyDeliveryInitialDataDto {
    vehicleTypes!: VehicleTypeDto[];
    materials!: MaterialDto[];
    selectedMaterials!: SelectedMaterialDto[];
    materialUnits!: MaterialUnitDto[];
    routingParameters!: RoutingParameters;
    defaultHasTrafficEnabled!: boolean;

    constructor(data?: IQuoteSupplyDeliveryInitialDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.vehicleTypes = [];
            this.materials = [];
            this.selectedMaterials = [];
            this.materialUnits = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["vehicleTypes"])) {
                this.vehicleTypes = [] as any;
                for (let item of _data["vehicleTypes"])
                    this.vehicleTypes!.push(VehicleTypeDto.fromJS(item));
            }
            else {
                this.vehicleTypes = <any>null;
            }
            if (Array.isArray(_data["materials"])) {
                this.materials = [] as any;
                for (let item of _data["materials"])
                    this.materials!.push(MaterialDto.fromJS(item));
            }
            else {
                this.materials = <any>null;
            }
            if (Array.isArray(_data["selectedMaterials"])) {
                this.selectedMaterials = [] as any;
                for (let item of _data["selectedMaterials"])
                    this.selectedMaterials!.push(SelectedMaterialDto.fromJS(item));
            }
            else {
                this.selectedMaterials = <any>null;
            }
            if (Array.isArray(_data["materialUnits"])) {
                this.materialUnits = [] as any;
                for (let item of _data["materialUnits"])
                    this.materialUnits!.push(MaterialUnitDto.fromJS(item));
            }
            else {
                this.materialUnits = <any>null;
            }
            this.routingParameters = _data["routingParameters"] !== undefined ? _data["routingParameters"] : <any>null;
            this.defaultHasTrafficEnabled = _data["defaultHasTrafficEnabled"] !== undefined ? _data["defaultHasTrafficEnabled"] : <any>null;
        }
    }

    static fromJS(data: any): QuoteSupplyDeliveryInitialDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new QuoteSupplyDeliveryInitialDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.vehicleTypes)) {
            data["vehicleTypes"] = [];
            for (let item of this.vehicleTypes)
                data["vehicleTypes"].push(item.toJSON());
        }
        if (Array.isArray(this.materials)) {
            data["materials"] = [];
            for (let item of this.materials)
                data["materials"].push(item.toJSON());
        }
        if (Array.isArray(this.selectedMaterials)) {
            data["selectedMaterials"] = [];
            for (let item of this.selectedMaterials)
                data["selectedMaterials"].push(item.toJSON());
        }
        if (Array.isArray(this.materialUnits)) {
            data["materialUnits"] = [];
            for (let item of this.materialUnits)
                data["materialUnits"].push(item.toJSON());
        }
        data["routingParameters"] = this.routingParameters !== undefined ? this.routingParameters : <any>null;
        data["defaultHasTrafficEnabled"] = this.defaultHasTrafficEnabled !== undefined ? this.defaultHasTrafficEnabled : <any>null;
        return data;
    }
}

export interface IQuoteSupplyDeliveryInitialDataDto {
    vehicleTypes: VehicleTypeDto[];
    materials: MaterialDto[];
    selectedMaterials: SelectedMaterialDto[];
    materialUnits: MaterialUnitDto[];
    routingParameters: RoutingParameters;
    defaultHasTrafficEnabled: boolean;
}

export class SelectedMaterialDto implements ISelectedMaterialDto {
    id!: number;
    unitName!: string;

    constructor(data?: ISelectedMaterialDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.unitName = _data["unitName"] !== undefined ? _data["unitName"] : <any>null;
        }
    }

    static fromJS(data: any): SelectedMaterialDto {
        data = typeof data === 'object' ? data : {};
        let result = new SelectedMaterialDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["unitName"] = this.unitName !== undefined ? this.unitName : <any>null;
        return data;
    }
}

export interface ISelectedMaterialDto {
    id: number;
    unitName: string;
}

export enum RoutingParameters {
    Traffic = 0,
}

export class UpdateQuoteDeliveryOnlyInitialDataDto implements IUpdateQuoteDeliveryOnlyInitialDataDto {
    deliveryDate!: Date;
    comments!: string;
    companyInfo!: CompanyDto;
    customerName!: string;
    vehicleTypes!: VehicleTypeDto[];
    deliveryLocation!: AddressDto;
    numberOfLoads!: number;
    defaultHasTrafficEnabled!: boolean;
    deliveryMovements!: UpdateQuoteDeliveryOnlyDeliveryMovementDto[];

    constructor(data?: IUpdateQuoteDeliveryOnlyInitialDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.companyInfo = new CompanyDto();
            this.vehicleTypes = [];
            this.deliveryLocation = new AddressDto();
            this.deliveryMovements = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deliveryDate = _data["deliveryDate"] ? new Date(_data["deliveryDate"].toString()) : <any>null;
            this.comments = _data["comments"] !== undefined ? _data["comments"] : <any>null;
            this.companyInfo = _data["companyInfo"] ? CompanyDto.fromJS(_data["companyInfo"]) : new CompanyDto();
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            if (Array.isArray(_data["vehicleTypes"])) {
                this.vehicleTypes = [] as any;
                for (let item of _data["vehicleTypes"])
                    this.vehicleTypes!.push(VehicleTypeDto.fromJS(item));
            }
            else {
                this.vehicleTypes = <any>null;
            }
            this.deliveryLocation = _data["deliveryLocation"] ? AddressDto.fromJS(_data["deliveryLocation"]) : new AddressDto();
            this.numberOfLoads = _data["numberOfLoads"] !== undefined ? _data["numberOfLoads"] : <any>null;
            this.defaultHasTrafficEnabled = _data["defaultHasTrafficEnabled"] !== undefined ? _data["defaultHasTrafficEnabled"] : <any>null;
            if (Array.isArray(_data["deliveryMovements"])) {
                this.deliveryMovements = [] as any;
                for (let item of _data["deliveryMovements"])
                    this.deliveryMovements!.push(UpdateQuoteDeliveryOnlyDeliveryMovementDto.fromJS(item));
            }
            else {
                this.deliveryMovements = <any>null;
            }
        }
    }

    static fromJS(data: any): UpdateQuoteDeliveryOnlyInitialDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateQuoteDeliveryOnlyInitialDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliveryDate"] = this.deliveryDate ? this.deliveryDate.toISOString() : <any>null;
        data["comments"] = this.comments !== undefined ? this.comments : <any>null;
        data["companyInfo"] = this.companyInfo ? this.companyInfo.toJSON() : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        if (Array.isArray(this.vehicleTypes)) {
            data["vehicleTypes"] = [];
            for (let item of this.vehicleTypes)
                data["vehicleTypes"].push(item.toJSON());
        }
        data["deliveryLocation"] = this.deliveryLocation ? this.deliveryLocation.toJSON() : <any>null;
        data["numberOfLoads"] = this.numberOfLoads !== undefined ? this.numberOfLoads : <any>null;
        data["defaultHasTrafficEnabled"] = this.defaultHasTrafficEnabled !== undefined ? this.defaultHasTrafficEnabled : <any>null;
        if (Array.isArray(this.deliveryMovements)) {
            data["deliveryMovements"] = [];
            for (let item of this.deliveryMovements)
                data["deliveryMovements"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUpdateQuoteDeliveryOnlyInitialDataDto {
    deliveryDate: Date;
    comments: string;
    companyInfo: CompanyDto;
    customerName: string;
    vehicleTypes: VehicleTypeDto[];
    deliveryLocation: AddressDto;
    numberOfLoads: number;
    defaultHasTrafficEnabled: boolean;
    deliveryMovements: UpdateQuoteDeliveryOnlyDeliveryMovementDto[];
}

export class UpdateQuoteDeliveryOnlyDeliveryMovementDto implements IUpdateQuoteDeliveryOnlyDeliveryMovementDto {
    deliveryMovementId!: number;
    defaultOnewayJourneyTime!: number;
    defaultTotalDeliveryPrice!: number;
    totalDeliveryPrice!: number;
    defaultDeliveryPricePerMinute!: number;
    deliveryPricePerMinute!: number;
    hasTrafficEnabled!: boolean;
    vehicleTypeId!: number;
    startLocation!: AddressDto;
    journeyTimes!: JouneyTimeHasTrafficDto[];

    constructor(data?: IUpdateQuoteDeliveryOnlyDeliveryMovementDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.startLocation = new AddressDto();
            this.journeyTimes = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deliveryMovementId = _data["deliveryMovementId"] !== undefined ? _data["deliveryMovementId"] : <any>null;
            this.defaultOnewayJourneyTime = _data["defaultOnewayJourneyTime"] !== undefined ? _data["defaultOnewayJourneyTime"] : <any>null;
            this.defaultTotalDeliveryPrice = _data["defaultTotalDeliveryPrice"] !== undefined ? _data["defaultTotalDeliveryPrice"] : <any>null;
            this.totalDeliveryPrice = _data["totalDeliveryPrice"] !== undefined ? _data["totalDeliveryPrice"] : <any>null;
            this.defaultDeliveryPricePerMinute = _data["defaultDeliveryPricePerMinute"] !== undefined ? _data["defaultDeliveryPricePerMinute"] : <any>null;
            this.deliveryPricePerMinute = _data["deliveryPricePerMinute"] !== undefined ? _data["deliveryPricePerMinute"] : <any>null;
            this.hasTrafficEnabled = _data["hasTrafficEnabled"] !== undefined ? _data["hasTrafficEnabled"] : <any>null;
            this.vehicleTypeId = _data["vehicleTypeId"] !== undefined ? _data["vehicleTypeId"] : <any>null;
            this.startLocation = _data["startLocation"] ? AddressDto.fromJS(_data["startLocation"]) : new AddressDto();
            if (Array.isArray(_data["journeyTimes"])) {
                this.journeyTimes = [] as any;
                for (let item of _data["journeyTimes"])
                    this.journeyTimes!.push(JouneyTimeHasTrafficDto.fromJS(item));
            }
            else {
                this.journeyTimes = <any>null;
            }
        }
    }

    static fromJS(data: any): UpdateQuoteDeliveryOnlyDeliveryMovementDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateQuoteDeliveryOnlyDeliveryMovementDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliveryMovementId"] = this.deliveryMovementId !== undefined ? this.deliveryMovementId : <any>null;
        data["defaultOnewayJourneyTime"] = this.defaultOnewayJourneyTime !== undefined ? this.defaultOnewayJourneyTime : <any>null;
        data["defaultTotalDeliveryPrice"] = this.defaultTotalDeliveryPrice !== undefined ? this.defaultTotalDeliveryPrice : <any>null;
        data["totalDeliveryPrice"] = this.totalDeliveryPrice !== undefined ? this.totalDeliveryPrice : <any>null;
        data["defaultDeliveryPricePerMinute"] = this.defaultDeliveryPricePerMinute !== undefined ? this.defaultDeliveryPricePerMinute : <any>null;
        data["deliveryPricePerMinute"] = this.deliveryPricePerMinute !== undefined ? this.deliveryPricePerMinute : <any>null;
        data["hasTrafficEnabled"] = this.hasTrafficEnabled !== undefined ? this.hasTrafficEnabled : <any>null;
        data["vehicleTypeId"] = this.vehicleTypeId !== undefined ? this.vehicleTypeId : <any>null;
        data["startLocation"] = this.startLocation ? this.startLocation.toJSON() : <any>null;
        if (Array.isArray(this.journeyTimes)) {
            data["journeyTimes"] = [];
            for (let item of this.journeyTimes)
                data["journeyTimes"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUpdateQuoteDeliveryOnlyDeliveryMovementDto {
    deliveryMovementId: number;
    defaultOnewayJourneyTime: number;
    defaultTotalDeliveryPrice: number;
    totalDeliveryPrice: number;
    defaultDeliveryPricePerMinute: number;
    deliveryPricePerMinute: number;
    hasTrafficEnabled: boolean;
    vehicleTypeId: number;
    startLocation: AddressDto;
    journeyTimes: JouneyTimeHasTrafficDto[];
}

export class JouneyTimeHasTrafficDto implements IJouneyTimeHasTrafficDto {
    hasTrafficEnabled!: boolean;
    journeyTime!: number;

    constructor(data?: IJouneyTimeHasTrafficDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hasTrafficEnabled = _data["hasTrafficEnabled"] !== undefined ? _data["hasTrafficEnabled"] : <any>null;
            this.journeyTime = _data["journeyTime"] !== undefined ? _data["journeyTime"] : <any>null;
        }
    }

    static fromJS(data: any): JouneyTimeHasTrafficDto {
        data = typeof data === 'object' ? data : {};
        let result = new JouneyTimeHasTrafficDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hasTrafficEnabled"] = this.hasTrafficEnabled !== undefined ? this.hasTrafficEnabled : <any>null;
        data["journeyTime"] = this.journeyTime !== undefined ? this.journeyTime : <any>null;
        return data;
    }
}

export interface IJouneyTimeHasTrafficDto {
    hasTrafficEnabled: boolean;
    journeyTime: number;
}

export class UpdateQuoteSupplyDeliveryInitialDataDto implements IUpdateQuoteSupplyDeliveryInitialDataDto {
    deliveryDate!: Date;
    comments!: string;
    companyInfo!: CompanyDto;
    customerName!: string;
    vehicleTypes!: VehicleTypeDto[];
    deliveryLocation!: AddressDto;
    numberOfLoads!: number;
    materials!: MaterialDto[];
    materialUnits!: MaterialUnitDto[];
    defaultHasTrafficEnabled!: boolean;
    deliveryMovements!: UpdateQuoteSupplyDeliveryMovementDto[];

    constructor(data?: IUpdateQuoteSupplyDeliveryInitialDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.companyInfo = new CompanyDto();
            this.vehicleTypes = [];
            this.deliveryLocation = new AddressDto();
            this.materials = [];
            this.materialUnits = [];
            this.deliveryMovements = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deliveryDate = _data["deliveryDate"] ? new Date(_data["deliveryDate"].toString()) : <any>null;
            this.comments = _data["comments"] !== undefined ? _data["comments"] : <any>null;
            this.companyInfo = _data["companyInfo"] ? CompanyDto.fromJS(_data["companyInfo"]) : new CompanyDto();
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            if (Array.isArray(_data["vehicleTypes"])) {
                this.vehicleTypes = [] as any;
                for (let item of _data["vehicleTypes"])
                    this.vehicleTypes!.push(VehicleTypeDto.fromJS(item));
            }
            else {
                this.vehicleTypes = <any>null;
            }
            this.deliveryLocation = _data["deliveryLocation"] ? AddressDto.fromJS(_data["deliveryLocation"]) : new AddressDto();
            this.numberOfLoads = _data["numberOfLoads"] !== undefined ? _data["numberOfLoads"] : <any>null;
            if (Array.isArray(_data["materials"])) {
                this.materials = [] as any;
                for (let item of _data["materials"])
                    this.materials!.push(MaterialDto.fromJS(item));
            }
            else {
                this.materials = <any>null;
            }
            if (Array.isArray(_data["materialUnits"])) {
                this.materialUnits = [] as any;
                for (let item of _data["materialUnits"])
                    this.materialUnits!.push(MaterialUnitDto.fromJS(item));
            }
            else {
                this.materialUnits = <any>null;
            }
            this.defaultHasTrafficEnabled = _data["defaultHasTrafficEnabled"] !== undefined ? _data["defaultHasTrafficEnabled"] : <any>null;
            if (Array.isArray(_data["deliveryMovements"])) {
                this.deliveryMovements = [] as any;
                for (let item of _data["deliveryMovements"])
                    this.deliveryMovements!.push(UpdateQuoteSupplyDeliveryMovementDto.fromJS(item));
            }
            else {
                this.deliveryMovements = <any>null;
            }
        }
    }

    static fromJS(data: any): UpdateQuoteSupplyDeliveryInitialDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateQuoteSupplyDeliveryInitialDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliveryDate"] = this.deliveryDate ? this.deliveryDate.toISOString() : <any>null;
        data["comments"] = this.comments !== undefined ? this.comments : <any>null;
        data["companyInfo"] = this.companyInfo ? this.companyInfo.toJSON() : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        if (Array.isArray(this.vehicleTypes)) {
            data["vehicleTypes"] = [];
            for (let item of this.vehicleTypes)
                data["vehicleTypes"].push(item.toJSON());
        }
        data["deliveryLocation"] = this.deliveryLocation ? this.deliveryLocation.toJSON() : <any>null;
        data["numberOfLoads"] = this.numberOfLoads !== undefined ? this.numberOfLoads : <any>null;
        if (Array.isArray(this.materials)) {
            data["materials"] = [];
            for (let item of this.materials)
                data["materials"].push(item.toJSON());
        }
        if (Array.isArray(this.materialUnits)) {
            data["materialUnits"] = [];
            for (let item of this.materialUnits)
                data["materialUnits"].push(item.toJSON());
        }
        data["defaultHasTrafficEnabled"] = this.defaultHasTrafficEnabled !== undefined ? this.defaultHasTrafficEnabled : <any>null;
        if (Array.isArray(this.deliveryMovements)) {
            data["deliveryMovements"] = [];
            for (let item of this.deliveryMovements)
                data["deliveryMovements"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUpdateQuoteSupplyDeliveryInitialDataDto {
    deliveryDate: Date;
    comments: string;
    companyInfo: CompanyDto;
    customerName: string;
    vehicleTypes: VehicleTypeDto[];
    deliveryLocation: AddressDto;
    numberOfLoads: number;
    materials: MaterialDto[];
    materialUnits: MaterialUnitDto[];
    defaultHasTrafficEnabled: boolean;
    deliveryMovements: UpdateQuoteSupplyDeliveryMovementDto[];
}

export class UpdateQuoteSupplyDeliveryMovementDto implements IUpdateQuoteSupplyDeliveryMovementDto {
    materialMovementId!: number;
    numberOfLoads!: number;
    materialId!: number;
    depotName!: string;
    quantity!: number;
    materialUnitId!: number;
    vehicleTypeId!: number;
    depotMaterialPriceId!: number;
    defaultOnewayJourneyTime!: number;
    onewayJourneyTime!: number;
    defaultTotalDeliveryPrice!: number;
    totalDeliveryPrice!: number;
    defaultDeliveryPricePerMinute!: number;
    deliveryPricePerMinute!: number;
    materialAndDeliveryPricePerQuantityUnit!: number;
    defaultMaterialAndDeliveryPricePerQuantityUnit!: number;
    totalMaterialPrice!: number;
    defaultTotalMaterialPrice!: number;
    materialPricePerQuantityUnit!: number;
    defaultMaterialPricePerQuantityUnit!: number;
    hasTrafficEnabled!: boolean;
    depotPricings!: UpdateQuoteSupplyDeliveryDepotPricing[];

    constructor(data?: IUpdateQuoteSupplyDeliveryMovementDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.depotPricings = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.materialMovementId = _data["materialMovementId"] !== undefined ? _data["materialMovementId"] : <any>null;
            this.numberOfLoads = _data["numberOfLoads"] !== undefined ? _data["numberOfLoads"] : <any>null;
            this.materialId = _data["materialId"] !== undefined ? _data["materialId"] : <any>null;
            this.depotName = _data["depotName"] !== undefined ? _data["depotName"] : <any>null;
            this.quantity = _data["quantity"] !== undefined ? _data["quantity"] : <any>null;
            this.materialUnitId = _data["materialUnitId"] !== undefined ? _data["materialUnitId"] : <any>null;
            this.vehicleTypeId = _data["vehicleTypeId"] !== undefined ? _data["vehicleTypeId"] : <any>null;
            this.depotMaterialPriceId = _data["depotMaterialPriceId"] !== undefined ? _data["depotMaterialPriceId"] : <any>null;
            this.defaultOnewayJourneyTime = _data["defaultOnewayJourneyTime"] !== undefined ? _data["defaultOnewayJourneyTime"] : <any>null;
            this.onewayJourneyTime = _data["onewayJourneyTime"] !== undefined ? _data["onewayJourneyTime"] : <any>null;
            this.defaultTotalDeliveryPrice = _data["defaultTotalDeliveryPrice"] !== undefined ? _data["defaultTotalDeliveryPrice"] : <any>null;
            this.totalDeliveryPrice = _data["totalDeliveryPrice"] !== undefined ? _data["totalDeliveryPrice"] : <any>null;
            this.defaultDeliveryPricePerMinute = _data["defaultDeliveryPricePerMinute"] !== undefined ? _data["defaultDeliveryPricePerMinute"] : <any>null;
            this.deliveryPricePerMinute = _data["deliveryPricePerMinute"] !== undefined ? _data["deliveryPricePerMinute"] : <any>null;
            this.materialAndDeliveryPricePerQuantityUnit = _data["materialAndDeliveryPricePerQuantityUnit"] !== undefined ? _data["materialAndDeliveryPricePerQuantityUnit"] : <any>null;
            this.defaultMaterialAndDeliveryPricePerQuantityUnit = _data["defaultMaterialAndDeliveryPricePerQuantityUnit"] !== undefined ? _data["defaultMaterialAndDeliveryPricePerQuantityUnit"] : <any>null;
            this.totalMaterialPrice = _data["totalMaterialPrice"] !== undefined ? _data["totalMaterialPrice"] : <any>null;
            this.defaultTotalMaterialPrice = _data["defaultTotalMaterialPrice"] !== undefined ? _data["defaultTotalMaterialPrice"] : <any>null;
            this.materialPricePerQuantityUnit = _data["materialPricePerQuantityUnit"] !== undefined ? _data["materialPricePerQuantityUnit"] : <any>null;
            this.defaultMaterialPricePerQuantityUnit = _data["defaultMaterialPricePerQuantityUnit"] !== undefined ? _data["defaultMaterialPricePerQuantityUnit"] : <any>null;
            this.hasTrafficEnabled = _data["hasTrafficEnabled"] !== undefined ? _data["hasTrafficEnabled"] : <any>null;
            if (Array.isArray(_data["depotPricings"])) {
                this.depotPricings = [] as any;
                for (let item of _data["depotPricings"])
                    this.depotPricings!.push(UpdateQuoteSupplyDeliveryDepotPricing.fromJS(item));
            }
            else {
                this.depotPricings = <any>null;
            }
        }
    }

    static fromJS(data: any): UpdateQuoteSupplyDeliveryMovementDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateQuoteSupplyDeliveryMovementDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["materialMovementId"] = this.materialMovementId !== undefined ? this.materialMovementId : <any>null;
        data["numberOfLoads"] = this.numberOfLoads !== undefined ? this.numberOfLoads : <any>null;
        data["materialId"] = this.materialId !== undefined ? this.materialId : <any>null;
        data["depotName"] = this.depotName !== undefined ? this.depotName : <any>null;
        data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["materialUnitId"] = this.materialUnitId !== undefined ? this.materialUnitId : <any>null;
        data["vehicleTypeId"] = this.vehicleTypeId !== undefined ? this.vehicleTypeId : <any>null;
        data["depotMaterialPriceId"] = this.depotMaterialPriceId !== undefined ? this.depotMaterialPriceId : <any>null;
        data["defaultOnewayJourneyTime"] = this.defaultOnewayJourneyTime !== undefined ? this.defaultOnewayJourneyTime : <any>null;
        data["onewayJourneyTime"] = this.onewayJourneyTime !== undefined ? this.onewayJourneyTime : <any>null;
        data["defaultTotalDeliveryPrice"] = this.defaultTotalDeliveryPrice !== undefined ? this.defaultTotalDeliveryPrice : <any>null;
        data["totalDeliveryPrice"] = this.totalDeliveryPrice !== undefined ? this.totalDeliveryPrice : <any>null;
        data["defaultDeliveryPricePerMinute"] = this.defaultDeliveryPricePerMinute !== undefined ? this.defaultDeliveryPricePerMinute : <any>null;
        data["deliveryPricePerMinute"] = this.deliveryPricePerMinute !== undefined ? this.deliveryPricePerMinute : <any>null;
        data["materialAndDeliveryPricePerQuantityUnit"] = this.materialAndDeliveryPricePerQuantityUnit !== undefined ? this.materialAndDeliveryPricePerQuantityUnit : <any>null;
        data["defaultMaterialAndDeliveryPricePerQuantityUnit"] = this.defaultMaterialAndDeliveryPricePerQuantityUnit !== undefined ? this.defaultMaterialAndDeliveryPricePerQuantityUnit : <any>null;
        data["totalMaterialPrice"] = this.totalMaterialPrice !== undefined ? this.totalMaterialPrice : <any>null;
        data["defaultTotalMaterialPrice"] = this.defaultTotalMaterialPrice !== undefined ? this.defaultTotalMaterialPrice : <any>null;
        data["materialPricePerQuantityUnit"] = this.materialPricePerQuantityUnit !== undefined ? this.materialPricePerQuantityUnit : <any>null;
        data["defaultMaterialPricePerQuantityUnit"] = this.defaultMaterialPricePerQuantityUnit !== undefined ? this.defaultMaterialPricePerQuantityUnit : <any>null;
        data["hasTrafficEnabled"] = this.hasTrafficEnabled !== undefined ? this.hasTrafficEnabled : <any>null;
        if (Array.isArray(this.depotPricings)) {
            data["depotPricings"] = [];
            for (let item of this.depotPricings)
                data["depotPricings"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUpdateQuoteSupplyDeliveryMovementDto {
    materialMovementId: number;
    numberOfLoads: number;
    materialId: number;
    depotName: string;
    quantity: number;
    materialUnitId: number;
    vehicleTypeId: number;
    depotMaterialPriceId: number;
    defaultOnewayJourneyTime: number;
    onewayJourneyTime: number;
    defaultTotalDeliveryPrice: number;
    totalDeliveryPrice: number;
    defaultDeliveryPricePerMinute: number;
    deliveryPricePerMinute: number;
    materialAndDeliveryPricePerQuantityUnit: number;
    defaultMaterialAndDeliveryPricePerQuantityUnit: number;
    totalMaterialPrice: number;
    defaultTotalMaterialPrice: number;
    materialPricePerQuantityUnit: number;
    defaultMaterialPricePerQuantityUnit: number;
    hasTrafficEnabled: boolean;
    depotPricings: UpdateQuoteSupplyDeliveryDepotPricing[];
}

export class UpdateQuoteSupplyDeliveryDepotPricing implements IUpdateQuoteSupplyDeliveryDepotPricing {
    depotMaterialPriceId!: number;
    price!: number;
    depotName!: string;
    journeyTime!: number;

    constructor(data?: IUpdateQuoteSupplyDeliveryDepotPricing) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.depotMaterialPriceId = _data["depotMaterialPriceId"] !== undefined ? _data["depotMaterialPriceId"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.depotName = _data["depotName"] !== undefined ? _data["depotName"] : <any>null;
            this.journeyTime = _data["journeyTime"] !== undefined ? _data["journeyTime"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateQuoteSupplyDeliveryDepotPricing {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateQuoteSupplyDeliveryDepotPricing();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["depotMaterialPriceId"] = this.depotMaterialPriceId !== undefined ? this.depotMaterialPriceId : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["depotName"] = this.depotName !== undefined ? this.depotName : <any>null;
        data["journeyTime"] = this.journeyTime !== undefined ? this.journeyTime : <any>null;
        return data;
    }
}

export interface IUpdateQuoteSupplyDeliveryDepotPricing {
    depotMaterialPriceId: number;
    price: number;
    depotName: string;
    journeyTime: number;
}

export class UpdateDeliveryOnlyQuoteCommand implements IUpdateDeliveryOnlyQuoteCommand {
    quoteId!: number;
    customerName!: string;
    companyId!: number;
    deliveryDateTime!: Date;
    deliveryLocation!: AddressDto;
    comments!: string;
    numberOfLoads!: number;
    deliveryMovements!: UpdateDeliveryMovementDto[];

    constructor(data?: IUpdateDeliveryOnlyQuoteCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.deliveryLocation = new AddressDto();
            this.deliveryMovements = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.quoteId = _data["quoteId"] !== undefined ? _data["quoteId"] : <any>null;
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.companyId = _data["companyId"] !== undefined ? _data["companyId"] : <any>null;
            this.deliveryDateTime = _data["deliveryDateTime"] ? new Date(_data["deliveryDateTime"].toString()) : <any>null;
            this.deliveryLocation = _data["deliveryLocation"] ? AddressDto.fromJS(_data["deliveryLocation"]) : new AddressDto();
            this.comments = _data["comments"] !== undefined ? _data["comments"] : <any>null;
            this.numberOfLoads = _data["numberOfLoads"] !== undefined ? _data["numberOfLoads"] : <any>null;
            if (Array.isArray(_data["deliveryMovements"])) {
                this.deliveryMovements = [] as any;
                for (let item of _data["deliveryMovements"])
                    this.deliveryMovements!.push(UpdateDeliveryMovementDto.fromJS(item));
            }
            else {
                this.deliveryMovements = <any>null;
            }
        }
    }

    static fromJS(data: any): UpdateDeliveryOnlyQuoteCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDeliveryOnlyQuoteCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quoteId"] = this.quoteId !== undefined ? this.quoteId : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["companyId"] = this.companyId !== undefined ? this.companyId : <any>null;
        data["deliveryDateTime"] = this.deliveryDateTime ? this.deliveryDateTime.toISOString() : <any>null;
        data["deliveryLocation"] = this.deliveryLocation ? this.deliveryLocation.toJSON() : <any>null;
        data["comments"] = this.comments !== undefined ? this.comments : <any>null;
        data["numberOfLoads"] = this.numberOfLoads !== undefined ? this.numberOfLoads : <any>null;
        if (Array.isArray(this.deliveryMovements)) {
            data["deliveryMovements"] = [];
            for (let item of this.deliveryMovements)
                data["deliveryMovements"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUpdateDeliveryOnlyQuoteCommand {
    quoteId: number;
    customerName: string;
    companyId: number;
    deliveryDateTime: Date;
    deliveryLocation: AddressDto;
    comments: string;
    numberOfLoads: number;
    deliveryMovements: UpdateDeliveryMovementDto[];
}

export class UpdateDeliveryMovementDto implements IUpdateDeliveryMovementDto {
    deliveryMovementId?: number | null;
    startLocation!: AddressDto;
    vehicleTypeId!: number;
    pricing!: UpdateDeliveryMovementPricingDto;

    constructor(data?: IUpdateDeliveryMovementDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.startLocation = new AddressDto();
            this.pricing = new UpdateDeliveryMovementPricingDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deliveryMovementId = _data["deliveryMovementId"] !== undefined ? _data["deliveryMovementId"] : <any>null;
            this.startLocation = _data["startLocation"] ? AddressDto.fromJS(_data["startLocation"]) : new AddressDto();
            this.vehicleTypeId = _data["vehicleTypeId"] !== undefined ? _data["vehicleTypeId"] : <any>null;
            this.pricing = _data["pricing"] ? UpdateDeliveryMovementPricingDto.fromJS(_data["pricing"]) : new UpdateDeliveryMovementPricingDto();
        }
    }

    static fromJS(data: any): UpdateDeliveryMovementDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDeliveryMovementDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliveryMovementId"] = this.deliveryMovementId !== undefined ? this.deliveryMovementId : <any>null;
        data["startLocation"] = this.startLocation ? this.startLocation.toJSON() : <any>null;
        data["vehicleTypeId"] = this.vehicleTypeId !== undefined ? this.vehicleTypeId : <any>null;
        data["pricing"] = this.pricing ? this.pricing.toJSON() : <any>null;
        return data;
    }
}

export interface IUpdateDeliveryMovementDto {
    deliveryMovementId?: number | null;
    startLocation: AddressDto;
    vehicleTypeId: number;
    pricing: UpdateDeliveryMovementPricingDto;
}

export class UpdateDeliveryMovementPricingDto implements IUpdateDeliveryMovementPricingDto {
    defaultOnewayJourneyTime!: number;
    onewayJourneyTime!: number;
    defaultTotalDeliveryPrice!: number;
    totalDeliveryPrice!: number;
    defaultDeliveryPricePerMinute!: number;
    deliveryPricePerMinute!: number;

    constructor(data?: IUpdateDeliveryMovementPricingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.defaultOnewayJourneyTime = _data["defaultOnewayJourneyTime"] !== undefined ? _data["defaultOnewayJourneyTime"] : <any>null;
            this.onewayJourneyTime = _data["onewayJourneyTime"] !== undefined ? _data["onewayJourneyTime"] : <any>null;
            this.defaultTotalDeliveryPrice = _data["defaultTotalDeliveryPrice"] !== undefined ? _data["defaultTotalDeliveryPrice"] : <any>null;
            this.totalDeliveryPrice = _data["totalDeliveryPrice"] !== undefined ? _data["totalDeliveryPrice"] : <any>null;
            this.defaultDeliveryPricePerMinute = _data["defaultDeliveryPricePerMinute"] !== undefined ? _data["defaultDeliveryPricePerMinute"] : <any>null;
            this.deliveryPricePerMinute = _data["deliveryPricePerMinute"] !== undefined ? _data["deliveryPricePerMinute"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateDeliveryMovementPricingDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDeliveryMovementPricingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["defaultOnewayJourneyTime"] = this.defaultOnewayJourneyTime !== undefined ? this.defaultOnewayJourneyTime : <any>null;
        data["onewayJourneyTime"] = this.onewayJourneyTime !== undefined ? this.onewayJourneyTime : <any>null;
        data["defaultTotalDeliveryPrice"] = this.defaultTotalDeliveryPrice !== undefined ? this.defaultTotalDeliveryPrice : <any>null;
        data["totalDeliveryPrice"] = this.totalDeliveryPrice !== undefined ? this.totalDeliveryPrice : <any>null;
        data["defaultDeliveryPricePerMinute"] = this.defaultDeliveryPricePerMinute !== undefined ? this.defaultDeliveryPricePerMinute : <any>null;
        data["deliveryPricePerMinute"] = this.deliveryPricePerMinute !== undefined ? this.deliveryPricePerMinute : <any>null;
        return data;
    }
}

export interface IUpdateDeliveryMovementPricingDto {
    defaultOnewayJourneyTime: number;
    onewayJourneyTime: number;
    defaultTotalDeliveryPrice: number;
    totalDeliveryPrice: number;
    defaultDeliveryPricePerMinute: number;
    deliveryPricePerMinute: number;
}

export class UpdateDeliveryOnlyQuotePricingCommand implements IUpdateDeliveryOnlyQuotePricingCommand {
    quoteId!: number;
    pricings!: UpdateDeliveryOnlyQuotePricingCommandItem[];

    constructor(data?: IUpdateDeliveryOnlyQuotePricingCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.pricings = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.quoteId = _data["quoteId"] !== undefined ? _data["quoteId"] : <any>null;
            if (Array.isArray(_data["pricings"])) {
                this.pricings = [] as any;
                for (let item of _data["pricings"])
                    this.pricings!.push(UpdateDeliveryOnlyQuotePricingCommandItem.fromJS(item));
            }
            else {
                this.pricings = <any>null;
            }
        }
    }

    static fromJS(data: any): UpdateDeliveryOnlyQuotePricingCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDeliveryOnlyQuotePricingCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quoteId"] = this.quoteId !== undefined ? this.quoteId : <any>null;
        if (Array.isArray(this.pricings)) {
            data["pricings"] = [];
            for (let item of this.pricings)
                data["pricings"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUpdateDeliveryOnlyQuotePricingCommand {
    quoteId: number;
    pricings: UpdateDeliveryOnlyQuotePricingCommandItem[];
}

export class UpdateDeliveryOnlyQuotePricingCommandItem implements IUpdateDeliveryOnlyQuotePricingCommandItem {
    deliveryMovementId!: number;
    pricing!: UpdateDeliveryMovementPricingDto;

    constructor(data?: IUpdateDeliveryOnlyQuotePricingCommandItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.pricing = new UpdateDeliveryMovementPricingDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deliveryMovementId = _data["deliveryMovementId"] !== undefined ? _data["deliveryMovementId"] : <any>null;
            this.pricing = _data["pricing"] ? UpdateDeliveryMovementPricingDto.fromJS(_data["pricing"]) : new UpdateDeliveryMovementPricingDto();
        }
    }

    static fromJS(data: any): UpdateDeliveryOnlyQuotePricingCommandItem {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDeliveryOnlyQuotePricingCommandItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliveryMovementId"] = this.deliveryMovementId !== undefined ? this.deliveryMovementId : <any>null;
        data["pricing"] = this.pricing ? this.pricing.toJSON() : <any>null;
        return data;
    }
}

export interface IUpdateDeliveryOnlyQuotePricingCommandItem {
    deliveryMovementId: number;
    pricing: UpdateDeliveryMovementPricingDto;
}

export class UpdateSupplyDeliveryQuoteCommand implements IUpdateSupplyDeliveryQuoteCommand {
    quoteId!: number;
    customerName!: string;
    companyId!: number;
    deliveryDateTime!: Date;
    deliveryLocation!: AddressDto;
    comments!: string;
    movements!: UpdateSupplyDeliveryMovementCommand[];

    constructor(data?: IUpdateSupplyDeliveryQuoteCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.deliveryLocation = new AddressDto();
            this.movements = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.quoteId = _data["quoteId"] !== undefined ? _data["quoteId"] : <any>null;
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.companyId = _data["companyId"] !== undefined ? _data["companyId"] : <any>null;
            this.deliveryDateTime = _data["deliveryDateTime"] ? new Date(_data["deliveryDateTime"].toString()) : <any>null;
            this.deliveryLocation = _data["deliveryLocation"] ? AddressDto.fromJS(_data["deliveryLocation"]) : new AddressDto();
            this.comments = _data["comments"] !== undefined ? _data["comments"] : <any>null;
            if (Array.isArray(_data["movements"])) {
                this.movements = [] as any;
                for (let item of _data["movements"])
                    this.movements!.push(UpdateSupplyDeliveryMovementCommand.fromJS(item));
            }
            else {
                this.movements = <any>null;
            }
        }
    }

    static fromJS(data: any): UpdateSupplyDeliveryQuoteCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateSupplyDeliveryQuoteCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quoteId"] = this.quoteId !== undefined ? this.quoteId : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["companyId"] = this.companyId !== undefined ? this.companyId : <any>null;
        data["deliveryDateTime"] = this.deliveryDateTime ? this.deliveryDateTime.toISOString() : <any>null;
        data["deliveryLocation"] = this.deliveryLocation ? this.deliveryLocation.toJSON() : <any>null;
        data["comments"] = this.comments !== undefined ? this.comments : <any>null;
        if (Array.isArray(this.movements)) {
            data["movements"] = [];
            for (let item of this.movements)
                data["movements"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUpdateSupplyDeliveryQuoteCommand {
    quoteId: number;
    customerName: string;
    companyId: number;
    deliveryDateTime: Date;
    deliveryLocation: AddressDto;
    comments: string;
    movements: UpdateSupplyDeliveryMovementCommand[];
}

export class UpdateSupplyDeliveryMovementCommand implements IUpdateSupplyDeliveryMovementCommand {
    materialMovementId?: number | null;
    vehicleTypeId!: number;
    numberOfLoads!: number;
    quantity!: number;
    depotMaterialPriceId!: number;
    materialUnitId!: number;
    hasTrafficEnabled!: boolean;
    deliveryPricing!: UpdateDeliveryMovementPricingDto;
    materialPricing!: UpdateMaterialMovementPricingDto;

    constructor(data?: IUpdateSupplyDeliveryMovementCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.deliveryPricing = new UpdateDeliveryMovementPricingDto();
            this.materialPricing = new UpdateMaterialMovementPricingDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.materialMovementId = _data["materialMovementId"] !== undefined ? _data["materialMovementId"] : <any>null;
            this.vehicleTypeId = _data["vehicleTypeId"] !== undefined ? _data["vehicleTypeId"] : <any>null;
            this.numberOfLoads = _data["numberOfLoads"] !== undefined ? _data["numberOfLoads"] : <any>null;
            this.quantity = _data["quantity"] !== undefined ? _data["quantity"] : <any>null;
            this.depotMaterialPriceId = _data["depotMaterialPriceId"] !== undefined ? _data["depotMaterialPriceId"] : <any>null;
            this.materialUnitId = _data["materialUnitId"] !== undefined ? _data["materialUnitId"] : <any>null;
            this.hasTrafficEnabled = _data["hasTrafficEnabled"] !== undefined ? _data["hasTrafficEnabled"] : <any>null;
            this.deliveryPricing = _data["deliveryPricing"] ? UpdateDeliveryMovementPricingDto.fromJS(_data["deliveryPricing"]) : new UpdateDeliveryMovementPricingDto();
            this.materialPricing = _data["materialPricing"] ? UpdateMaterialMovementPricingDto.fromJS(_data["materialPricing"]) : new UpdateMaterialMovementPricingDto();
        }
    }

    static fromJS(data: any): UpdateSupplyDeliveryMovementCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateSupplyDeliveryMovementCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["materialMovementId"] = this.materialMovementId !== undefined ? this.materialMovementId : <any>null;
        data["vehicleTypeId"] = this.vehicleTypeId !== undefined ? this.vehicleTypeId : <any>null;
        data["numberOfLoads"] = this.numberOfLoads !== undefined ? this.numberOfLoads : <any>null;
        data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["depotMaterialPriceId"] = this.depotMaterialPriceId !== undefined ? this.depotMaterialPriceId : <any>null;
        data["materialUnitId"] = this.materialUnitId !== undefined ? this.materialUnitId : <any>null;
        data["hasTrafficEnabled"] = this.hasTrafficEnabled !== undefined ? this.hasTrafficEnabled : <any>null;
        data["deliveryPricing"] = this.deliveryPricing ? this.deliveryPricing.toJSON() : <any>null;
        data["materialPricing"] = this.materialPricing ? this.materialPricing.toJSON() : <any>null;
        return data;
    }
}

export interface IUpdateSupplyDeliveryMovementCommand {
    materialMovementId?: number | null;
    vehicleTypeId: number;
    numberOfLoads: number;
    quantity: number;
    depotMaterialPriceId: number;
    materialUnitId: number;
    hasTrafficEnabled: boolean;
    deliveryPricing: UpdateDeliveryMovementPricingDto;
    materialPricing: UpdateMaterialMovementPricingDto;
}

export class UpdateMaterialMovementPricingDto implements IUpdateMaterialMovementPricingDto {
    defaultTotalMaterialPrice!: number;
    totalMaterialPrice!: number;
    materialPricePerQuantityUnit!: number;
    defaultMaterialPricePerQuantityUnit!: number;

    constructor(data?: IUpdateMaterialMovementPricingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.defaultTotalMaterialPrice = _data["defaultTotalMaterialPrice"] !== undefined ? _data["defaultTotalMaterialPrice"] : <any>null;
            this.totalMaterialPrice = _data["totalMaterialPrice"] !== undefined ? _data["totalMaterialPrice"] : <any>null;
            this.materialPricePerQuantityUnit = _data["materialPricePerQuantityUnit"] !== undefined ? _data["materialPricePerQuantityUnit"] : <any>null;
            this.defaultMaterialPricePerQuantityUnit = _data["defaultMaterialPricePerQuantityUnit"] !== undefined ? _data["defaultMaterialPricePerQuantityUnit"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateMaterialMovementPricingDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateMaterialMovementPricingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["defaultTotalMaterialPrice"] = this.defaultTotalMaterialPrice !== undefined ? this.defaultTotalMaterialPrice : <any>null;
        data["totalMaterialPrice"] = this.totalMaterialPrice !== undefined ? this.totalMaterialPrice : <any>null;
        data["materialPricePerQuantityUnit"] = this.materialPricePerQuantityUnit !== undefined ? this.materialPricePerQuantityUnit : <any>null;
        data["defaultMaterialPricePerQuantityUnit"] = this.defaultMaterialPricePerQuantityUnit !== undefined ? this.defaultMaterialPricePerQuantityUnit : <any>null;
        return data;
    }
}

export interface IUpdateMaterialMovementPricingDto {
    defaultTotalMaterialPrice: number;
    totalMaterialPrice: number;
    materialPricePerQuantityUnit: number;
    defaultMaterialPricePerQuantityUnit: number;
}

export class UpdateSupplyDeliveryQuotePricingCommand implements IUpdateSupplyDeliveryQuotePricingCommand {
    quoteId!: number;
    pricings!: UpdateSupplyDeliveryQuotePricingCommandItem[];

    constructor(data?: IUpdateSupplyDeliveryQuotePricingCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.pricings = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.quoteId = _data["quoteId"] !== undefined ? _data["quoteId"] : <any>null;
            if (Array.isArray(_data["pricings"])) {
                this.pricings = [] as any;
                for (let item of _data["pricings"])
                    this.pricings!.push(UpdateSupplyDeliveryQuotePricingCommandItem.fromJS(item));
            }
            else {
                this.pricings = <any>null;
            }
        }
    }

    static fromJS(data: any): UpdateSupplyDeliveryQuotePricingCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateSupplyDeliveryQuotePricingCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quoteId"] = this.quoteId !== undefined ? this.quoteId : <any>null;
        if (Array.isArray(this.pricings)) {
            data["pricings"] = [];
            for (let item of this.pricings)
                data["pricings"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUpdateSupplyDeliveryQuotePricingCommand {
    quoteId: number;
    pricings: UpdateSupplyDeliveryQuotePricingCommandItem[];
}

export class UpdateSupplyDeliveryQuotePricingCommandItem implements IUpdateSupplyDeliveryQuotePricingCommandItem {
    materialMovementId!: number;
    deliveryMovementId!: number;
    deliveryPricing!: UpdateDeliveryMovementPricingDto;
    materialPricing!: UpdateMaterialMovementPricingDto;

    constructor(data?: IUpdateSupplyDeliveryQuotePricingCommandItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.deliveryPricing = new UpdateDeliveryMovementPricingDto();
            this.materialPricing = new UpdateMaterialMovementPricingDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.materialMovementId = _data["materialMovementId"] !== undefined ? _data["materialMovementId"] : <any>null;
            this.deliveryMovementId = _data["deliveryMovementId"] !== undefined ? _data["deliveryMovementId"] : <any>null;
            this.deliveryPricing = _data["deliveryPricing"] ? UpdateDeliveryMovementPricingDto.fromJS(_data["deliveryPricing"]) : new UpdateDeliveryMovementPricingDto();
            this.materialPricing = _data["materialPricing"] ? UpdateMaterialMovementPricingDto.fromJS(_data["materialPricing"]) : new UpdateMaterialMovementPricingDto();
        }
    }

    static fromJS(data: any): UpdateSupplyDeliveryQuotePricingCommandItem {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateSupplyDeliveryQuotePricingCommandItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["materialMovementId"] = this.materialMovementId !== undefined ? this.materialMovementId : <any>null;
        data["deliveryMovementId"] = this.deliveryMovementId !== undefined ? this.deliveryMovementId : <any>null;
        data["deliveryPricing"] = this.deliveryPricing ? this.deliveryPricing.toJSON() : <any>null;
        data["materialPricing"] = this.materialPricing ? this.materialPricing.toJSON() : <any>null;
        return data;
    }
}

export interface IUpdateSupplyDeliveryQuotePricingCommandItem {
    materialMovementId: number;
    deliveryMovementId: number;
    deliveryPricing: UpdateDeliveryMovementPricingDto;
    materialPricing: UpdateMaterialMovementPricingDto;
}

export class AdjustDeliveryQuotePricingDto implements IAdjustDeliveryQuotePricingDto {
    defaultOnewayJourneyTime!: number;
    defaultTotalDeliveryPrice!: number;
    totalDeliveryPrice!: number;
    defaultDeliveryPricePerTimeUnit!: number;
    deliveryPricePerTimeUnit!: number;
    deliveryUnitName!: string;
    vehicleTypeName!: string;
    numberOfLoads!: number;

    constructor(data?: IAdjustDeliveryQuotePricingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.defaultOnewayJourneyTime = _data["defaultOnewayJourneyTime"] !== undefined ? _data["defaultOnewayJourneyTime"] : <any>null;
            this.defaultTotalDeliveryPrice = _data["defaultTotalDeliveryPrice"] !== undefined ? _data["defaultTotalDeliveryPrice"] : <any>null;
            this.totalDeliveryPrice = _data["totalDeliveryPrice"] !== undefined ? _data["totalDeliveryPrice"] : <any>null;
            this.defaultDeliveryPricePerTimeUnit = _data["defaultDeliveryPricePerTimeUnit"] !== undefined ? _data["defaultDeliveryPricePerTimeUnit"] : <any>null;
            this.deliveryPricePerTimeUnit = _data["deliveryPricePerTimeUnit"] !== undefined ? _data["deliveryPricePerTimeUnit"] : <any>null;
            this.deliveryUnitName = _data["deliveryUnitName"] !== undefined ? _data["deliveryUnitName"] : <any>null;
            this.vehicleTypeName = _data["vehicleTypeName"] !== undefined ? _data["vehicleTypeName"] : <any>null;
            this.numberOfLoads = _data["numberOfLoads"] !== undefined ? _data["numberOfLoads"] : <any>null;
        }
    }

    static fromJS(data: any): AdjustDeliveryQuotePricingDto {
        data = typeof data === 'object' ? data : {};
        let result = new AdjustDeliveryQuotePricingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["defaultOnewayJourneyTime"] = this.defaultOnewayJourneyTime !== undefined ? this.defaultOnewayJourneyTime : <any>null;
        data["defaultTotalDeliveryPrice"] = this.defaultTotalDeliveryPrice !== undefined ? this.defaultTotalDeliveryPrice : <any>null;
        data["totalDeliveryPrice"] = this.totalDeliveryPrice !== undefined ? this.totalDeliveryPrice : <any>null;
        data["defaultDeliveryPricePerTimeUnit"] = this.defaultDeliveryPricePerTimeUnit !== undefined ? this.defaultDeliveryPricePerTimeUnit : <any>null;
        data["deliveryPricePerTimeUnit"] = this.deliveryPricePerTimeUnit !== undefined ? this.deliveryPricePerTimeUnit : <any>null;
        data["deliveryUnitName"] = this.deliveryUnitName !== undefined ? this.deliveryUnitName : <any>null;
        data["vehicleTypeName"] = this.vehicleTypeName !== undefined ? this.vehicleTypeName : <any>null;
        data["numberOfLoads"] = this.numberOfLoads !== undefined ? this.numberOfLoads : <any>null;
        return data;
    }
}

export interface IAdjustDeliveryQuotePricingDto {
    defaultOnewayJourneyTime: number;
    defaultTotalDeliveryPrice: number;
    totalDeliveryPrice: number;
    defaultDeliveryPricePerTimeUnit: number;
    deliveryPricePerTimeUnit: number;
    deliveryUnitName: string;
    vehicleTypeName: string;
    numberOfLoads: number;
}

export class GetNewDeliveryOnlyMovementPricingQuery implements IGetNewDeliveryOnlyMovementPricingQuery {
    onewayJourneyTime!: number;
    startLocation!: RoutePoint;
    deliveryLocation!: RoutePoint;
    numberOfLoads!: number;
    vehicleTypeId!: number;

    constructor(data?: IGetNewDeliveryOnlyMovementPricingQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.startLocation = new RoutePoint();
            this.deliveryLocation = new RoutePoint();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.onewayJourneyTime = _data["onewayJourneyTime"] !== undefined ? _data["onewayJourneyTime"] : <any>null;
            this.startLocation = _data["startLocation"] ? RoutePoint.fromJS(_data["startLocation"]) : new RoutePoint();
            this.deliveryLocation = _data["deliveryLocation"] ? RoutePoint.fromJS(_data["deliveryLocation"]) : new RoutePoint();
            this.numberOfLoads = _data["numberOfLoads"] !== undefined ? _data["numberOfLoads"] : <any>null;
            this.vehicleTypeId = _data["vehicleTypeId"] !== undefined ? _data["vehicleTypeId"] : <any>null;
        }
    }

    static fromJS(data: any): GetNewDeliveryOnlyMovementPricingQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetNewDeliveryOnlyMovementPricingQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["onewayJourneyTime"] = this.onewayJourneyTime !== undefined ? this.onewayJourneyTime : <any>null;
        data["startLocation"] = this.startLocation ? this.startLocation.toJSON() : <any>null;
        data["deliveryLocation"] = this.deliveryLocation ? this.deliveryLocation.toJSON() : <any>null;
        data["numberOfLoads"] = this.numberOfLoads !== undefined ? this.numberOfLoads : <any>null;
        data["vehicleTypeId"] = this.vehicleTypeId !== undefined ? this.vehicleTypeId : <any>null;
        return data;
    }
}

export interface IGetNewDeliveryOnlyMovementPricingQuery {
    onewayJourneyTime: number;
    startLocation: RoutePoint;
    deliveryLocation: RoutePoint;
    numberOfLoads: number;
    vehicleTypeId: number;
}

export class DeliveryOnlyMovementPricingDto implements IDeliveryOnlyMovementPricingDto {
    deliveryMovementId!: number;
    defaultOnewayJourneyTime!: number;
    defaultTotalDeliveryPrice!: number;
    totalDeliveryPrice!: number;
    defaultDeliveryPricePerTimeUnit!: number;
    deliveryPricePerTimeUnit!: number;

    constructor(data?: IDeliveryOnlyMovementPricingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deliveryMovementId = _data["deliveryMovementId"] !== undefined ? _data["deliveryMovementId"] : <any>null;
            this.defaultOnewayJourneyTime = _data["defaultOnewayJourneyTime"] !== undefined ? _data["defaultOnewayJourneyTime"] : <any>null;
            this.defaultTotalDeliveryPrice = _data["defaultTotalDeliveryPrice"] !== undefined ? _data["defaultTotalDeliveryPrice"] : <any>null;
            this.totalDeliveryPrice = _data["totalDeliveryPrice"] !== undefined ? _data["totalDeliveryPrice"] : <any>null;
            this.defaultDeliveryPricePerTimeUnit = _data["defaultDeliveryPricePerTimeUnit"] !== undefined ? _data["defaultDeliveryPricePerTimeUnit"] : <any>null;
            this.deliveryPricePerTimeUnit = _data["deliveryPricePerTimeUnit"] !== undefined ? _data["deliveryPricePerTimeUnit"] : <any>null;
        }
    }

    static fromJS(data: any): DeliveryOnlyMovementPricingDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryOnlyMovementPricingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliveryMovementId"] = this.deliveryMovementId !== undefined ? this.deliveryMovementId : <any>null;
        data["defaultOnewayJourneyTime"] = this.defaultOnewayJourneyTime !== undefined ? this.defaultOnewayJourneyTime : <any>null;
        data["defaultTotalDeliveryPrice"] = this.defaultTotalDeliveryPrice !== undefined ? this.defaultTotalDeliveryPrice : <any>null;
        data["totalDeliveryPrice"] = this.totalDeliveryPrice !== undefined ? this.totalDeliveryPrice : <any>null;
        data["defaultDeliveryPricePerTimeUnit"] = this.defaultDeliveryPricePerTimeUnit !== undefined ? this.defaultDeliveryPricePerTimeUnit : <any>null;
        data["deliveryPricePerTimeUnit"] = this.deliveryPricePerTimeUnit !== undefined ? this.deliveryPricePerTimeUnit : <any>null;
        return data;
    }
}

export interface IDeliveryOnlyMovementPricingDto {
    deliveryMovementId: number;
    defaultOnewayJourneyTime: number;
    defaultTotalDeliveryPrice: number;
    totalDeliveryPrice: number;
    defaultDeliveryPricePerTimeUnit: number;
    deliveryPricePerTimeUnit: number;
}

export class SupplyDeliveryMovementPricingDto implements ISupplyDeliveryMovementPricingDto {
    deliveryMovementId!: number;
    materialMovementId!: number;
    defaultOnewayJourneyTime!: number;
    defaultTotalDeliveryPrice!: number;
    totalDeliveryPrice!: number;
    defaultDeliveryPricePerTimeUnit!: number;
    deliveryPricePerTimeUnit!: number;
    defaultMaterialPricePerQuantityUnit!: number;
    materialPricePerQuantityUnit!: number;
    defaultMaterialAndDeliveryPricePerQuantityUnit!: number;
    materialAndDeliveryPricePerQuantityUnit!: number;
    defaultTotalMaterialPrice!: number;
    totalMaterialPrice!: number;

    constructor(data?: ISupplyDeliveryMovementPricingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deliveryMovementId = _data["deliveryMovementId"] !== undefined ? _data["deliveryMovementId"] : <any>null;
            this.materialMovementId = _data["materialMovementId"] !== undefined ? _data["materialMovementId"] : <any>null;
            this.defaultOnewayJourneyTime = _data["defaultOnewayJourneyTime"] !== undefined ? _data["defaultOnewayJourneyTime"] : <any>null;
            this.defaultTotalDeliveryPrice = _data["defaultTotalDeliveryPrice"] !== undefined ? _data["defaultTotalDeliveryPrice"] : <any>null;
            this.totalDeliveryPrice = _data["totalDeliveryPrice"] !== undefined ? _data["totalDeliveryPrice"] : <any>null;
            this.defaultDeliveryPricePerTimeUnit = _data["defaultDeliveryPricePerTimeUnit"] !== undefined ? _data["defaultDeliveryPricePerTimeUnit"] : <any>null;
            this.deliveryPricePerTimeUnit = _data["deliveryPricePerTimeUnit"] !== undefined ? _data["deliveryPricePerTimeUnit"] : <any>null;
            this.defaultMaterialPricePerQuantityUnit = _data["defaultMaterialPricePerQuantityUnit"] !== undefined ? _data["defaultMaterialPricePerQuantityUnit"] : <any>null;
            this.materialPricePerQuantityUnit = _data["materialPricePerQuantityUnit"] !== undefined ? _data["materialPricePerQuantityUnit"] : <any>null;
            this.defaultMaterialAndDeliveryPricePerQuantityUnit = _data["defaultMaterialAndDeliveryPricePerQuantityUnit"] !== undefined ? _data["defaultMaterialAndDeliveryPricePerQuantityUnit"] : <any>null;
            this.materialAndDeliveryPricePerQuantityUnit = _data["materialAndDeliveryPricePerQuantityUnit"] !== undefined ? _data["materialAndDeliveryPricePerQuantityUnit"] : <any>null;
            this.defaultTotalMaterialPrice = _data["defaultTotalMaterialPrice"] !== undefined ? _data["defaultTotalMaterialPrice"] : <any>null;
            this.totalMaterialPrice = _data["totalMaterialPrice"] !== undefined ? _data["totalMaterialPrice"] : <any>null;
        }
    }

    static fromJS(data: any): SupplyDeliveryMovementPricingDto {
        data = typeof data === 'object' ? data : {};
        let result = new SupplyDeliveryMovementPricingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliveryMovementId"] = this.deliveryMovementId !== undefined ? this.deliveryMovementId : <any>null;
        data["materialMovementId"] = this.materialMovementId !== undefined ? this.materialMovementId : <any>null;
        data["defaultOnewayJourneyTime"] = this.defaultOnewayJourneyTime !== undefined ? this.defaultOnewayJourneyTime : <any>null;
        data["defaultTotalDeliveryPrice"] = this.defaultTotalDeliveryPrice !== undefined ? this.defaultTotalDeliveryPrice : <any>null;
        data["totalDeliveryPrice"] = this.totalDeliveryPrice !== undefined ? this.totalDeliveryPrice : <any>null;
        data["defaultDeliveryPricePerTimeUnit"] = this.defaultDeliveryPricePerTimeUnit !== undefined ? this.defaultDeliveryPricePerTimeUnit : <any>null;
        data["deliveryPricePerTimeUnit"] = this.deliveryPricePerTimeUnit !== undefined ? this.deliveryPricePerTimeUnit : <any>null;
        data["defaultMaterialPricePerQuantityUnit"] = this.defaultMaterialPricePerQuantityUnit !== undefined ? this.defaultMaterialPricePerQuantityUnit : <any>null;
        data["materialPricePerQuantityUnit"] = this.materialPricePerQuantityUnit !== undefined ? this.materialPricePerQuantityUnit : <any>null;
        data["defaultMaterialAndDeliveryPricePerQuantityUnit"] = this.defaultMaterialAndDeliveryPricePerQuantityUnit !== undefined ? this.defaultMaterialAndDeliveryPricePerQuantityUnit : <any>null;
        data["materialAndDeliveryPricePerQuantityUnit"] = this.materialAndDeliveryPricePerQuantityUnit !== undefined ? this.materialAndDeliveryPricePerQuantityUnit : <any>null;
        data["defaultTotalMaterialPrice"] = this.defaultTotalMaterialPrice !== undefined ? this.defaultTotalMaterialPrice : <any>null;
        data["totalMaterialPrice"] = this.totalMaterialPrice !== undefined ? this.totalMaterialPrice : <any>null;
        return data;
    }
}

export interface ISupplyDeliveryMovementPricingDto {
    deliveryMovementId: number;
    materialMovementId: number;
    defaultOnewayJourneyTime: number;
    defaultTotalDeliveryPrice: number;
    totalDeliveryPrice: number;
    defaultDeliveryPricePerTimeUnit: number;
    deliveryPricePerTimeUnit: number;
    defaultMaterialPricePerQuantityUnit: number;
    materialPricePerQuantityUnit: number;
    defaultMaterialAndDeliveryPricePerQuantityUnit: number;
    materialAndDeliveryPricePerQuantityUnit: number;
    defaultTotalMaterialPrice: number;
    totalMaterialPrice: number;
}

export class GetNewSupplyDeliveryMovementPricingQuery implements IGetNewSupplyDeliveryMovementPricingQuery {
    deliveryLocation!: RoutePoint;
    onewayJourneyTime!: number;
    quantity!: number;
    numberOfLoads!: number;
    vehicleTypeId!: number;
    materialUnitId!: number;
    depotMaterialPriceId!: number;

    constructor(data?: IGetNewSupplyDeliveryMovementPricingQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.deliveryLocation = new RoutePoint();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deliveryLocation = _data["deliveryLocation"] ? RoutePoint.fromJS(_data["deliveryLocation"]) : new RoutePoint();
            this.onewayJourneyTime = _data["onewayJourneyTime"] !== undefined ? _data["onewayJourneyTime"] : <any>null;
            this.quantity = _data["quantity"] !== undefined ? _data["quantity"] : <any>null;
            this.numberOfLoads = _data["numberOfLoads"] !== undefined ? _data["numberOfLoads"] : <any>null;
            this.vehicleTypeId = _data["vehicleTypeId"] !== undefined ? _data["vehicleTypeId"] : <any>null;
            this.materialUnitId = _data["materialUnitId"] !== undefined ? _data["materialUnitId"] : <any>null;
            this.depotMaterialPriceId = _data["depotMaterialPriceId"] !== undefined ? _data["depotMaterialPriceId"] : <any>null;
        }
    }

    static fromJS(data: any): GetNewSupplyDeliveryMovementPricingQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetNewSupplyDeliveryMovementPricingQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliveryLocation"] = this.deliveryLocation ? this.deliveryLocation.toJSON() : <any>null;
        data["onewayJourneyTime"] = this.onewayJourneyTime !== undefined ? this.onewayJourneyTime : <any>null;
        data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["numberOfLoads"] = this.numberOfLoads !== undefined ? this.numberOfLoads : <any>null;
        data["vehicleTypeId"] = this.vehicleTypeId !== undefined ? this.vehicleTypeId : <any>null;
        data["materialUnitId"] = this.materialUnitId !== undefined ? this.materialUnitId : <any>null;
        data["depotMaterialPriceId"] = this.depotMaterialPriceId !== undefined ? this.depotMaterialPriceId : <any>null;
        return data;
    }
}

export interface IGetNewSupplyDeliveryMovementPricingQuery {
    deliveryLocation: RoutePoint;
    onewayJourneyTime: number;
    quantity: number;
    numberOfLoads: number;
    vehicleTypeId: number;
    materialUnitId: number;
    depotMaterialPriceId: number;
}

export class CreateDeliveryOnlyQuoteCommand implements ICreateDeliveryOnlyQuoteCommand {
    customerName!: string;
    companyId!: number;
    deliveryLocation!: AddressDto;
    deliveryDateTime!: Date;
    comments!: string;
    numberOfLoads!: number;
    deliveryMovements!: CreateDeliveryMovementDto[];

    constructor(data?: ICreateDeliveryOnlyQuoteCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.deliveryLocation = new AddressDto();
            this.deliveryMovements = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.companyId = _data["companyId"] !== undefined ? _data["companyId"] : <any>null;
            this.deliveryLocation = _data["deliveryLocation"] ? AddressDto.fromJS(_data["deliveryLocation"]) : new AddressDto();
            this.deliveryDateTime = _data["deliveryDateTime"] ? new Date(_data["deliveryDateTime"].toString()) : <any>null;
            this.comments = _data["comments"] !== undefined ? _data["comments"] : <any>null;
            this.numberOfLoads = _data["numberOfLoads"] !== undefined ? _data["numberOfLoads"] : <any>null;
            if (Array.isArray(_data["deliveryMovements"])) {
                this.deliveryMovements = [] as any;
                for (let item of _data["deliveryMovements"])
                    this.deliveryMovements!.push(CreateDeliveryMovementDto.fromJS(item));
            }
            else {
                this.deliveryMovements = <any>null;
            }
        }
    }

    static fromJS(data: any): CreateDeliveryOnlyQuoteCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDeliveryOnlyQuoteCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["companyId"] = this.companyId !== undefined ? this.companyId : <any>null;
        data["deliveryLocation"] = this.deliveryLocation ? this.deliveryLocation.toJSON() : <any>null;
        data["deliveryDateTime"] = this.deliveryDateTime ? this.deliveryDateTime.toISOString() : <any>null;
        data["comments"] = this.comments !== undefined ? this.comments : <any>null;
        data["numberOfLoads"] = this.numberOfLoads !== undefined ? this.numberOfLoads : <any>null;
        if (Array.isArray(this.deliveryMovements)) {
            data["deliveryMovements"] = [];
            for (let item of this.deliveryMovements)
                data["deliveryMovements"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICreateDeliveryOnlyQuoteCommand {
    customerName: string;
    companyId: number;
    deliveryLocation: AddressDto;
    deliveryDateTime: Date;
    comments: string;
    numberOfLoads: number;
    deliveryMovements: CreateDeliveryMovementDto[];
}

export class CreateDeliveryMovementDto implements ICreateDeliveryMovementDto {
    startLocation!: AddressDto;
    vehicleTypeId!: number;
    pricing!: CreateDeliveryMovementPricingDto;

    constructor(data?: ICreateDeliveryMovementDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.startLocation = new AddressDto();
            this.pricing = new CreateDeliveryMovementPricingDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startLocation = _data["startLocation"] ? AddressDto.fromJS(_data["startLocation"]) : new AddressDto();
            this.vehicleTypeId = _data["vehicleTypeId"] !== undefined ? _data["vehicleTypeId"] : <any>null;
            this.pricing = _data["pricing"] ? CreateDeliveryMovementPricingDto.fromJS(_data["pricing"]) : new CreateDeliveryMovementPricingDto();
        }
    }

    static fromJS(data: any): CreateDeliveryMovementDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDeliveryMovementDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startLocation"] = this.startLocation ? this.startLocation.toJSON() : <any>null;
        data["vehicleTypeId"] = this.vehicleTypeId !== undefined ? this.vehicleTypeId : <any>null;
        data["pricing"] = this.pricing ? this.pricing.toJSON() : <any>null;
        return data;
    }
}

export interface ICreateDeliveryMovementDto {
    startLocation: AddressDto;
    vehicleTypeId: number;
    pricing: CreateDeliveryMovementPricingDto;
}

export class CreateDeliveryMovementPricingDto implements ICreateDeliveryMovementPricingDto {
    defaultOnewayJourneyTime!: number;
    onewayJourneyTime!: number;
    defaultTotalDeliveryPrice!: number;
    totalDeliveryPrice!: number;
    defaultDeliveryPricePerMinute!: number;
    deliveryPricePerMinute!: number;

    constructor(data?: ICreateDeliveryMovementPricingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.defaultOnewayJourneyTime = _data["defaultOnewayJourneyTime"] !== undefined ? _data["defaultOnewayJourneyTime"] : <any>null;
            this.onewayJourneyTime = _data["onewayJourneyTime"] !== undefined ? _data["onewayJourneyTime"] : <any>null;
            this.defaultTotalDeliveryPrice = _data["defaultTotalDeliveryPrice"] !== undefined ? _data["defaultTotalDeliveryPrice"] : <any>null;
            this.totalDeliveryPrice = _data["totalDeliveryPrice"] !== undefined ? _data["totalDeliveryPrice"] : <any>null;
            this.defaultDeliveryPricePerMinute = _data["defaultDeliveryPricePerMinute"] !== undefined ? _data["defaultDeliveryPricePerMinute"] : <any>null;
            this.deliveryPricePerMinute = _data["deliveryPricePerMinute"] !== undefined ? _data["deliveryPricePerMinute"] : <any>null;
        }
    }

    static fromJS(data: any): CreateDeliveryMovementPricingDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDeliveryMovementPricingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["defaultOnewayJourneyTime"] = this.defaultOnewayJourneyTime !== undefined ? this.defaultOnewayJourneyTime : <any>null;
        data["onewayJourneyTime"] = this.onewayJourneyTime !== undefined ? this.onewayJourneyTime : <any>null;
        data["defaultTotalDeliveryPrice"] = this.defaultTotalDeliveryPrice !== undefined ? this.defaultTotalDeliveryPrice : <any>null;
        data["totalDeliveryPrice"] = this.totalDeliveryPrice !== undefined ? this.totalDeliveryPrice : <any>null;
        data["defaultDeliveryPricePerMinute"] = this.defaultDeliveryPricePerMinute !== undefined ? this.defaultDeliveryPricePerMinute : <any>null;
        data["deliveryPricePerMinute"] = this.deliveryPricePerMinute !== undefined ? this.deliveryPricePerMinute : <any>null;
        return data;
    }
}

export interface ICreateDeliveryMovementPricingDto {
    defaultOnewayJourneyTime: number;
    onewayJourneyTime: number;
    defaultTotalDeliveryPrice: number;
    totalDeliveryPrice: number;
    defaultDeliveryPricePerMinute: number;
    deliveryPricePerMinute: number;
}

export class CreateSupplyDeliveryQuoteCommand implements ICreateSupplyDeliveryQuoteCommand {
    customerName?: string | null;
    companyId!: number;
    deliveryLocation!: AddressDto;
    deliveryDateTime?: Date | null;
    comments?: string | null;
    materialMovements!: CreateMaterialMovementCommand[];

    constructor(data?: ICreateSupplyDeliveryQuoteCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.deliveryLocation = new AddressDto();
            this.materialMovements = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.companyId = _data["companyId"] !== undefined ? _data["companyId"] : <any>null;
            this.deliveryLocation = _data["deliveryLocation"] ? AddressDto.fromJS(_data["deliveryLocation"]) : new AddressDto();
            this.deliveryDateTime = _data["deliveryDateTime"] ? new Date(_data["deliveryDateTime"].toString()) : <any>null;
            this.comments = _data["comments"] !== undefined ? _data["comments"] : <any>null;
            if (Array.isArray(_data["materialMovements"])) {
                this.materialMovements = [] as any;
                for (let item of _data["materialMovements"])
                    this.materialMovements!.push(CreateMaterialMovementCommand.fromJS(item));
            }
            else {
                this.materialMovements = <any>null;
            }
        }
    }

    static fromJS(data: any): CreateSupplyDeliveryQuoteCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSupplyDeliveryQuoteCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["companyId"] = this.companyId !== undefined ? this.companyId : <any>null;
        data["deliveryLocation"] = this.deliveryLocation ? this.deliveryLocation.toJSON() : <any>null;
        data["deliveryDateTime"] = this.deliveryDateTime ? this.deliveryDateTime.toISOString() : <any>null;
        data["comments"] = this.comments !== undefined ? this.comments : <any>null;
        if (Array.isArray(this.materialMovements)) {
            data["materialMovements"] = [];
            for (let item of this.materialMovements)
                data["materialMovements"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICreateSupplyDeliveryQuoteCommand {
    customerName?: string | null;
    companyId: number;
    deliveryLocation: AddressDto;
    deliveryDateTime?: Date | null;
    comments?: string | null;
    materialMovements: CreateMaterialMovementCommand[];
}

export class CreateMaterialMovementCommand implements ICreateMaterialMovementCommand {
    onewayJourneyTime!: number;
    depotMaterialPriceId!: number;
    quantity!: number;
    materialUnitId!: number;
    vehicleTypeId!: number;
    hasTrafficEnabled!: boolean;
    pricing!: CreateSupplyDeliveryMovementPricingDto;

    constructor(data?: ICreateMaterialMovementCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.pricing = new CreateSupplyDeliveryMovementPricingDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.onewayJourneyTime = _data["onewayJourneyTime"] !== undefined ? _data["onewayJourneyTime"] : <any>null;
            this.depotMaterialPriceId = _data["depotMaterialPriceId"] !== undefined ? _data["depotMaterialPriceId"] : <any>null;
            this.quantity = _data["quantity"] !== undefined ? _data["quantity"] : <any>null;
            this.materialUnitId = _data["materialUnitId"] !== undefined ? _data["materialUnitId"] : <any>null;
            this.vehicleTypeId = _data["vehicleTypeId"] !== undefined ? _data["vehicleTypeId"] : <any>null;
            this.hasTrafficEnabled = _data["hasTrafficEnabled"] !== undefined ? _data["hasTrafficEnabled"] : <any>null;
            this.pricing = _data["pricing"] ? CreateSupplyDeliveryMovementPricingDto.fromJS(_data["pricing"]) : new CreateSupplyDeliveryMovementPricingDto();
        }
    }

    static fromJS(data: any): CreateMaterialMovementCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMaterialMovementCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["onewayJourneyTime"] = this.onewayJourneyTime !== undefined ? this.onewayJourneyTime : <any>null;
        data["depotMaterialPriceId"] = this.depotMaterialPriceId !== undefined ? this.depotMaterialPriceId : <any>null;
        data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["materialUnitId"] = this.materialUnitId !== undefined ? this.materialUnitId : <any>null;
        data["vehicleTypeId"] = this.vehicleTypeId !== undefined ? this.vehicleTypeId : <any>null;
        data["hasTrafficEnabled"] = this.hasTrafficEnabled !== undefined ? this.hasTrafficEnabled : <any>null;
        data["pricing"] = this.pricing ? this.pricing.toJSON() : <any>null;
        return data;
    }
}

export interface ICreateMaterialMovementCommand {
    onewayJourneyTime: number;
    depotMaterialPriceId: number;
    quantity: number;
    materialUnitId: number;
    vehicleTypeId: number;
    hasTrafficEnabled: boolean;
    pricing: CreateSupplyDeliveryMovementPricingDto;
}

export class CreateSupplyDeliveryMovementPricingDto implements ICreateSupplyDeliveryMovementPricingDto {
    defaultTotalDeliveryPrice!: number;
    totalDeliveryPrice!: number;
    defaultDeliveryPricePerTimeUnit!: number;
    deliveryPricePerTimeUnit!: number;
    defaultTotalMaterialPrice!: number;
    totalMaterialPrice!: number;
    materialPricePerQuantityUnit!: number;
    defaultMaterialPricePerQuantityUnit!: number;

    constructor(data?: ICreateSupplyDeliveryMovementPricingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.defaultTotalDeliveryPrice = _data["defaultTotalDeliveryPrice"] !== undefined ? _data["defaultTotalDeliveryPrice"] : <any>null;
            this.totalDeliveryPrice = _data["totalDeliveryPrice"] !== undefined ? _data["totalDeliveryPrice"] : <any>null;
            this.defaultDeliveryPricePerTimeUnit = _data["defaultDeliveryPricePerTimeUnit"] !== undefined ? _data["defaultDeliveryPricePerTimeUnit"] : <any>null;
            this.deliveryPricePerTimeUnit = _data["deliveryPricePerTimeUnit"] !== undefined ? _data["deliveryPricePerTimeUnit"] : <any>null;
            this.defaultTotalMaterialPrice = _data["defaultTotalMaterialPrice"] !== undefined ? _data["defaultTotalMaterialPrice"] : <any>null;
            this.totalMaterialPrice = _data["totalMaterialPrice"] !== undefined ? _data["totalMaterialPrice"] : <any>null;
            this.materialPricePerQuantityUnit = _data["materialPricePerQuantityUnit"] !== undefined ? _data["materialPricePerQuantityUnit"] : <any>null;
            this.defaultMaterialPricePerQuantityUnit = _data["defaultMaterialPricePerQuantityUnit"] !== undefined ? _data["defaultMaterialPricePerQuantityUnit"] : <any>null;
        }
    }

    static fromJS(data: any): CreateSupplyDeliveryMovementPricingDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSupplyDeliveryMovementPricingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["defaultTotalDeliveryPrice"] = this.defaultTotalDeliveryPrice !== undefined ? this.defaultTotalDeliveryPrice : <any>null;
        data["totalDeliveryPrice"] = this.totalDeliveryPrice !== undefined ? this.totalDeliveryPrice : <any>null;
        data["defaultDeliveryPricePerTimeUnit"] = this.defaultDeliveryPricePerTimeUnit !== undefined ? this.defaultDeliveryPricePerTimeUnit : <any>null;
        data["deliveryPricePerTimeUnit"] = this.deliveryPricePerTimeUnit !== undefined ? this.deliveryPricePerTimeUnit : <any>null;
        data["defaultTotalMaterialPrice"] = this.defaultTotalMaterialPrice !== undefined ? this.defaultTotalMaterialPrice : <any>null;
        data["totalMaterialPrice"] = this.totalMaterialPrice !== undefined ? this.totalMaterialPrice : <any>null;
        data["materialPricePerQuantityUnit"] = this.materialPricePerQuantityUnit !== undefined ? this.materialPricePerQuantityUnit : <any>null;
        data["defaultMaterialPricePerQuantityUnit"] = this.defaultMaterialPricePerQuantityUnit !== undefined ? this.defaultMaterialPricePerQuantityUnit : <any>null;
        return data;
    }
}

export interface ICreateSupplyDeliveryMovementPricingDto {
    defaultTotalDeliveryPrice: number;
    totalDeliveryPrice: number;
    defaultDeliveryPricePerTimeUnit: number;
    deliveryPricePerTimeUnit: number;
    defaultTotalMaterialPrice: number;
    totalMaterialPrice: number;
    materialPricePerQuantityUnit: number;
    defaultMaterialPricePerQuantityUnit: number;
}

export class MaterialMovementForDisplayDto implements IMaterialMovementForDisplayDto {
    depotMaterialPriceId!: number;
    price!: number;
    depotName!: string;
    journeyTime!: number;

    constructor(data?: IMaterialMovementForDisplayDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.depotMaterialPriceId = _data["depotMaterialPriceId"] !== undefined ? _data["depotMaterialPriceId"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.depotName = _data["depotName"] !== undefined ? _data["depotName"] : <any>null;
            this.journeyTime = _data["journeyTime"] !== undefined ? _data["journeyTime"] : <any>null;
        }
    }

    static fromJS(data: any): MaterialMovementForDisplayDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaterialMovementForDisplayDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["depotMaterialPriceId"] = this.depotMaterialPriceId !== undefined ? this.depotMaterialPriceId : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["depotName"] = this.depotName !== undefined ? this.depotName : <any>null;
        data["journeyTime"] = this.journeyTime !== undefined ? this.journeyTime : <any>null;
        return data;
    }
}

export interface IMaterialMovementForDisplayDto {
    depotMaterialPriceId: number;
    price: number;
    depotName: string;
    journeyTime: number;
}

export class DeliveryOnlyMovementForDisplayDto implements IDeliveryOnlyMovementForDisplayDto {
    journeyTimes!: JouneyTimeHasTrafficDto[];

    constructor(data?: IDeliveryOnlyMovementForDisplayDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.journeyTimes = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["journeyTimes"])) {
                this.journeyTimes = [] as any;
                for (let item of _data["journeyTimes"])
                    this.journeyTimes!.push(JouneyTimeHasTrafficDto.fromJS(item));
            }
            else {
                this.journeyTimes = <any>null;
            }
        }
    }

    static fromJS(data: any): DeliveryOnlyMovementForDisplayDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryOnlyMovementForDisplayDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.journeyTimes)) {
            data["journeyTimes"] = [];
            for (let item of this.journeyTimes)
                data["journeyTimes"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDeliveryOnlyMovementForDisplayDto {
    journeyTimes: JouneyTimeHasTrafficDto[];
}

export class EmailQuoteCommand implements IEmailQuoteCommand {
    companyEmail!: string;
    quoteId!: number;

    constructor(data?: IEmailQuoteCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.companyEmail = _data["companyEmail"] !== undefined ? _data["companyEmail"] : <any>null;
            this.quoteId = _data["quoteId"] !== undefined ? _data["quoteId"] : <any>null;
        }
    }

    static fromJS(data: any): EmailQuoteCommand {
        data = typeof data === 'object' ? data : {};
        let result = new EmailQuoteCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyEmail"] = this.companyEmail !== undefined ? this.companyEmail : <any>null;
        data["quoteId"] = this.quoteId !== undefined ? this.quoteId : <any>null;
        return data;
    }
}

export interface IEmailQuoteCommand {
    companyEmail: string;
    quoteId: number;
}

export class SettingsInitialDataDto implements ISettingsInitialDataDto {
    _!: MaterialUnits;
    deliveryUnit!: DeliveryUnitDto;
    applyMaximumCapacitySettings!: ApplyMaximumCapacitySettingDto[];

    constructor(data?: ISettingsInitialDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.deliveryUnit = new DeliveryUnitDto();
            this.applyMaximumCapacitySettings = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this._ = _data["_"] !== undefined ? _data["_"] : <any>null;
            this.deliveryUnit = _data["deliveryUnit"] ? DeliveryUnitDto.fromJS(_data["deliveryUnit"]) : new DeliveryUnitDto();
            if (Array.isArray(_data["applyMaximumCapacitySettings"])) {
                this.applyMaximumCapacitySettings = [] as any;
                for (let item of _data["applyMaximumCapacitySettings"])
                    this.applyMaximumCapacitySettings!.push(ApplyMaximumCapacitySettingDto.fromJS(item));
            }
            else {
                this.applyMaximumCapacitySettings = <any>null;
            }
        }
    }

    static fromJS(data: any): SettingsInitialDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new SettingsInitialDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["_"] = this._ !== undefined ? this._ : <any>null;
        data["deliveryUnit"] = this.deliveryUnit ? this.deliveryUnit.toJSON() : <any>null;
        if (Array.isArray(this.applyMaximumCapacitySettings)) {
            data["applyMaximumCapacitySettings"] = [];
            for (let item of this.applyMaximumCapacitySettings)
                data["applyMaximumCapacitySettings"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISettingsInitialDataDto {
    _: MaterialUnits;
    deliveryUnit: DeliveryUnitDto;
    applyMaximumCapacitySettings: ApplyMaximumCapacitySettingDto[];
}

export enum MaterialUnits {
    Tonnes = 1,
    Loads = 2,
}

export class DeliveryUnitDto implements IDeliveryUnitDto {
    deliveryUnitId!: number;
    deliveryUnitName!: string;

    constructor(data?: IDeliveryUnitDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deliveryUnitId = _data["deliveryUnitId"] !== undefined ? _data["deliveryUnitId"] : <any>null;
            this.deliveryUnitName = _data["deliveryUnitName"] !== undefined ? _data["deliveryUnitName"] : <any>null;
        }
    }

    static fromJS(data: any): DeliveryUnitDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryUnitDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliveryUnitId"] = this.deliveryUnitId !== undefined ? this.deliveryUnitId : <any>null;
        data["deliveryUnitName"] = this.deliveryUnitName !== undefined ? this.deliveryUnitName : <any>null;
        return data;
    }
}

export interface IDeliveryUnitDto {
    deliveryUnitId: number;
    deliveryUnitName: string;
}

export class ApplyMaximumCapacitySettingDto implements IApplyMaximumCapacitySettingDto {
    materialUnitId!: number;
    applyMaximumCapacityFromVehicleTypes!: number[];

    constructor(data?: IApplyMaximumCapacitySettingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.applyMaximumCapacityFromVehicleTypes = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.materialUnitId = _data["materialUnitId"] !== undefined ? _data["materialUnitId"] : <any>null;
            if (Array.isArray(_data["applyMaximumCapacityFromVehicleTypes"])) {
                this.applyMaximumCapacityFromVehicleTypes = [] as any;
                for (let item of _data["applyMaximumCapacityFromVehicleTypes"])
                    this.applyMaximumCapacityFromVehicleTypes!.push(item);
            }
            else {
                this.applyMaximumCapacityFromVehicleTypes = <any>null;
            }
        }
    }

    static fromJS(data: any): ApplyMaximumCapacitySettingDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplyMaximumCapacitySettingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["materialUnitId"] = this.materialUnitId !== undefined ? this.materialUnitId : <any>null;
        if (Array.isArray(this.applyMaximumCapacityFromVehicleTypes)) {
            data["applyMaximumCapacityFromVehicleTypes"] = [];
            for (let item of this.applyMaximumCapacityFromVehicleTypes)
                data["applyMaximumCapacityFromVehicleTypes"].push(item);
        }
        return data;
    }
}

export interface IApplyMaximumCapacitySettingDto {
    materialUnitId: number;
    applyMaximumCapacityFromVehicleTypes: number[];
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}